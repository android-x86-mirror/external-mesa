/* This file is automatically generated by mapi_abi.py.  Do not modify. */

#ifndef _GLAPI_TMP_H_
#define _GLAPI_TMP_H_
typedef int GLfixed;
typedef int GLclampx;
#endif /* _GLAPI_TMP_H_ */

#ifdef MAPI_TMP_DEFINES
#define GL_GLEXT_PROTOTYPES
#include "GL/gl.h"
#include "GL/glext.h"

void APIENTRY gl_dispatch_stub_0(GLuint list, GLenum mode);
void APIENTRY gl_dispatch_stub_1(void);
void APIENTRY gl_dispatch_stub_2(GLuint list);
void APIENTRY gl_dispatch_stub_3(GLsizei n, GLenum type, const GLvoid *lists);
void APIENTRY gl_dispatch_stub_4(GLuint list, GLsizei range);
GLuint APIENTRY gl_dispatch_stub_5(GLsizei range);
void APIENTRY gl_dispatch_stub_6(GLuint base);
void APIENTRY gl_dispatch_stub_7(GLenum mode);
void APIENTRY gl_dispatch_stub_8(GLsizei width, GLsizei height, GLfloat xorig, GLfloat yorig, GLfloat xmove, GLfloat ymove, const GLubyte *bitmap);
void APIENTRY gl_dispatch_stub_9(GLbyte red, GLbyte green, GLbyte blue);
void APIENTRY gl_dispatch_stub_10(const GLbyte *v);
void APIENTRY gl_dispatch_stub_11(GLdouble red, GLdouble green, GLdouble blue);
void APIENTRY gl_dispatch_stub_12(const GLdouble *v);
void APIENTRY gl_dispatch_stub_13(GLfloat red, GLfloat green, GLfloat blue);
void APIENTRY gl_dispatch_stub_14(const GLfloat *v);
void APIENTRY gl_dispatch_stub_15(GLint red, GLint green, GLint blue);
void APIENTRY gl_dispatch_stub_16(const GLint *v);
void APIENTRY gl_dispatch_stub_17(GLshort red, GLshort green, GLshort blue);
void APIENTRY gl_dispatch_stub_18(const GLshort *v);
void APIENTRY gl_dispatch_stub_19(GLubyte red, GLubyte green, GLubyte blue);
void APIENTRY gl_dispatch_stub_20(const GLubyte *v);
void APIENTRY gl_dispatch_stub_21(GLuint red, GLuint green, GLuint blue);
void APIENTRY gl_dispatch_stub_22(const GLuint *v);
void APIENTRY gl_dispatch_stub_23(GLushort red, GLushort green, GLushort blue);
void APIENTRY gl_dispatch_stub_24(const GLushort *v);
void APIENTRY gl_dispatch_stub_25(GLbyte red, GLbyte green, GLbyte blue, GLbyte alpha);
void APIENTRY gl_dispatch_stub_26(const GLbyte *v);
void APIENTRY gl_dispatch_stub_27(GLdouble red, GLdouble green, GLdouble blue, GLdouble alpha);
void APIENTRY gl_dispatch_stub_28(const GLdouble *v);
GLAPI void APIENTRY glColor4f(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha);
void APIENTRY gl_dispatch_stub_30(const GLfloat *v);
void APIENTRY gl_dispatch_stub_31(GLint red, GLint green, GLint blue, GLint alpha);
void APIENTRY gl_dispatch_stub_32(const GLint *v);
void APIENTRY gl_dispatch_stub_33(GLshort red, GLshort green, GLshort blue, GLshort alpha);
void APIENTRY gl_dispatch_stub_34(const GLshort *v);
GLAPI void APIENTRY glColor4ub(GLubyte red, GLubyte green, GLubyte blue, GLubyte alpha);
void APIENTRY gl_dispatch_stub_36(const GLubyte *v);
void APIENTRY gl_dispatch_stub_37(GLuint red, GLuint green, GLuint blue, GLuint alpha);
void APIENTRY gl_dispatch_stub_38(const GLuint *v);
void APIENTRY gl_dispatch_stub_39(GLushort red, GLushort green, GLushort blue, GLushort alpha);
void APIENTRY gl_dispatch_stub_40(const GLushort *v);
void APIENTRY gl_dispatch_stub_41(GLboolean flag);
void APIENTRY gl_dispatch_stub_42(const GLboolean *flag);
void APIENTRY gl_dispatch_stub_43(void);
void APIENTRY gl_dispatch_stub_44(GLdouble c);
void APIENTRY gl_dispatch_stub_45(const GLdouble *c);
void APIENTRY gl_dispatch_stub_46(GLfloat c);
void APIENTRY gl_dispatch_stub_47(const GLfloat *c);
void APIENTRY gl_dispatch_stub_48(GLint c);
void APIENTRY gl_dispatch_stub_49(const GLint *c);
void APIENTRY gl_dispatch_stub_50(GLshort c);
void APIENTRY gl_dispatch_stub_51(const GLshort *c);
void APIENTRY gl_dispatch_stub_52(GLbyte nx, GLbyte ny, GLbyte nz);
void APIENTRY gl_dispatch_stub_53(const GLbyte *v);
void APIENTRY gl_dispatch_stub_54(GLdouble nx, GLdouble ny, GLdouble nz);
void APIENTRY gl_dispatch_stub_55(const GLdouble *v);
GLAPI void APIENTRY glNormal3f(GLfloat nx, GLfloat ny, GLfloat nz);
void APIENTRY gl_dispatch_stub_57(const GLfloat *v);
void APIENTRY gl_dispatch_stub_58(GLint nx, GLint ny, GLint nz);
void APIENTRY gl_dispatch_stub_59(const GLint *v);
void APIENTRY gl_dispatch_stub_60(GLshort nx, GLshort ny, GLshort nz);
void APIENTRY gl_dispatch_stub_61(const GLshort *v);
void APIENTRY gl_dispatch_stub_62(GLdouble x, GLdouble y);
void APIENTRY gl_dispatch_stub_63(const GLdouble *v);
void APIENTRY gl_dispatch_stub_64(GLfloat x, GLfloat y);
void APIENTRY gl_dispatch_stub_65(const GLfloat *v);
void APIENTRY gl_dispatch_stub_66(GLint x, GLint y);
void APIENTRY gl_dispatch_stub_67(const GLint *v);
void APIENTRY gl_dispatch_stub_68(GLshort x, GLshort y);
void APIENTRY gl_dispatch_stub_69(const GLshort *v);
void APIENTRY gl_dispatch_stub_70(GLdouble x, GLdouble y, GLdouble z);
void APIENTRY gl_dispatch_stub_71(const GLdouble *v);
void APIENTRY gl_dispatch_stub_72(GLfloat x, GLfloat y, GLfloat z);
void APIENTRY gl_dispatch_stub_73(const GLfloat *v);
void APIENTRY gl_dispatch_stub_74(GLint x, GLint y, GLint z);
void APIENTRY gl_dispatch_stub_75(const GLint *v);
void APIENTRY gl_dispatch_stub_76(GLshort x, GLshort y, GLshort z);
void APIENTRY gl_dispatch_stub_77(const GLshort *v);
void APIENTRY gl_dispatch_stub_78(GLdouble x, GLdouble y, GLdouble z, GLdouble w);
void APIENTRY gl_dispatch_stub_79(const GLdouble *v);
void APIENTRY gl_dispatch_stub_80(GLfloat x, GLfloat y, GLfloat z, GLfloat w);
void APIENTRY gl_dispatch_stub_81(const GLfloat *v);
void APIENTRY gl_dispatch_stub_82(GLint x, GLint y, GLint z, GLint w);
void APIENTRY gl_dispatch_stub_83(const GLint *v);
void APIENTRY gl_dispatch_stub_84(GLshort x, GLshort y, GLshort z, GLshort w);
void APIENTRY gl_dispatch_stub_85(const GLshort *v);
void APIENTRY gl_dispatch_stub_86(GLdouble x1, GLdouble y1, GLdouble x2, GLdouble y2);
void APIENTRY gl_dispatch_stub_87(const GLdouble *v1, const GLdouble *v2);
void APIENTRY gl_dispatch_stub_88(GLfloat x1, GLfloat y1, GLfloat x2, GLfloat y2);
void APIENTRY gl_dispatch_stub_89(const GLfloat *v1, const GLfloat *v2);
void APIENTRY gl_dispatch_stub_90(GLint x1, GLint y1, GLint x2, GLint y2);
void APIENTRY gl_dispatch_stub_91(const GLint *v1, const GLint *v2);
void APIENTRY gl_dispatch_stub_92(GLshort x1, GLshort y1, GLshort x2, GLshort y2);
void APIENTRY gl_dispatch_stub_93(const GLshort *v1, const GLshort *v2);
void APIENTRY gl_dispatch_stub_94(GLdouble s);
void APIENTRY gl_dispatch_stub_95(const GLdouble *v);
void APIENTRY gl_dispatch_stub_96(GLfloat s);
void APIENTRY gl_dispatch_stub_97(const GLfloat *v);
void APIENTRY gl_dispatch_stub_98(GLint s);
void APIENTRY gl_dispatch_stub_99(const GLint *v);
void APIENTRY gl_dispatch_stub_100(GLshort s);
void APIENTRY gl_dispatch_stub_101(const GLshort *v);
void APIENTRY gl_dispatch_stub_102(GLdouble s, GLdouble t);
void APIENTRY gl_dispatch_stub_103(const GLdouble *v);
void APIENTRY gl_dispatch_stub_104(GLfloat s, GLfloat t);
void APIENTRY gl_dispatch_stub_105(const GLfloat *v);
void APIENTRY gl_dispatch_stub_106(GLint s, GLint t);
void APIENTRY gl_dispatch_stub_107(const GLint *v);
void APIENTRY gl_dispatch_stub_108(GLshort s, GLshort t);
void APIENTRY gl_dispatch_stub_109(const GLshort *v);
void APIENTRY gl_dispatch_stub_110(GLdouble s, GLdouble t, GLdouble r);
void APIENTRY gl_dispatch_stub_111(const GLdouble *v);
void APIENTRY gl_dispatch_stub_112(GLfloat s, GLfloat t, GLfloat r);
void APIENTRY gl_dispatch_stub_113(const GLfloat *v);
void APIENTRY gl_dispatch_stub_114(GLint s, GLint t, GLint r);
void APIENTRY gl_dispatch_stub_115(const GLint *v);
void APIENTRY gl_dispatch_stub_116(GLshort s, GLshort t, GLshort r);
void APIENTRY gl_dispatch_stub_117(const GLshort *v);
void APIENTRY gl_dispatch_stub_118(GLdouble s, GLdouble t, GLdouble r, GLdouble q);
void APIENTRY gl_dispatch_stub_119(const GLdouble *v);
void APIENTRY gl_dispatch_stub_120(GLfloat s, GLfloat t, GLfloat r, GLfloat q);
void APIENTRY gl_dispatch_stub_121(const GLfloat *v);
void APIENTRY gl_dispatch_stub_122(GLint s, GLint t, GLint r, GLint q);
void APIENTRY gl_dispatch_stub_123(const GLint *v);
void APIENTRY gl_dispatch_stub_124(GLshort s, GLshort t, GLshort r, GLshort q);
void APIENTRY gl_dispatch_stub_125(const GLshort *v);
void APIENTRY gl_dispatch_stub_126(GLdouble x, GLdouble y);
void APIENTRY gl_dispatch_stub_127(const GLdouble *v);
void APIENTRY gl_dispatch_stub_128(GLfloat x, GLfloat y);
void APIENTRY gl_dispatch_stub_129(const GLfloat *v);
void APIENTRY gl_dispatch_stub_130(GLint x, GLint y);
void APIENTRY gl_dispatch_stub_131(const GLint *v);
void APIENTRY gl_dispatch_stub_132(GLshort x, GLshort y);
void APIENTRY gl_dispatch_stub_133(const GLshort *v);
void APIENTRY gl_dispatch_stub_134(GLdouble x, GLdouble y, GLdouble z);
void APIENTRY gl_dispatch_stub_135(const GLdouble *v);
void APIENTRY gl_dispatch_stub_136(GLfloat x, GLfloat y, GLfloat z);
void APIENTRY gl_dispatch_stub_137(const GLfloat *v);
void APIENTRY gl_dispatch_stub_138(GLint x, GLint y, GLint z);
void APIENTRY gl_dispatch_stub_139(const GLint *v);
void APIENTRY gl_dispatch_stub_140(GLshort x, GLshort y, GLshort z);
void APIENTRY gl_dispatch_stub_141(const GLshort *v);
void APIENTRY gl_dispatch_stub_142(GLdouble x, GLdouble y, GLdouble z, GLdouble w);
void APIENTRY gl_dispatch_stub_143(const GLdouble *v);
void APIENTRY gl_dispatch_stub_144(GLfloat x, GLfloat y, GLfloat z, GLfloat w);
void APIENTRY gl_dispatch_stub_145(const GLfloat *v);
void APIENTRY gl_dispatch_stub_146(GLint x, GLint y, GLint z, GLint w);
void APIENTRY gl_dispatch_stub_147(const GLint *v);
void APIENTRY gl_dispatch_stub_148(GLshort x, GLshort y, GLshort z, GLshort w);
void APIENTRY gl_dispatch_stub_149(const GLshort *v);
void APIENTRY gl_dispatch_stub_150(GLenum plane, const GLdouble *equation);
void APIENTRY gl_dispatch_stub_151(GLenum face, GLenum mode);
GLAPI void APIENTRY glCullFace(GLenum mode);
GLAPI void APIENTRY glFogf(GLenum pname, GLfloat param);
GLAPI void APIENTRY glFogfv(GLenum pname, const GLfloat *params);
void APIENTRY gl_dispatch_stub_155(GLenum pname, GLint param);
void APIENTRY gl_dispatch_stub_156(GLenum pname, const GLint *params);
GLAPI void APIENTRY glFrontFace(GLenum mode);
GLAPI void APIENTRY glHint(GLenum target, GLenum mode);
GLAPI void APIENTRY glLightf(GLenum light, GLenum pname, GLfloat param);
GLAPI void APIENTRY glLightfv(GLenum light, GLenum pname, const GLfloat *params);
void APIENTRY gl_dispatch_stub_161(GLenum light, GLenum pname, GLint param);
void APIENTRY gl_dispatch_stub_162(GLenum light, GLenum pname, const GLint *params);
GLAPI void APIENTRY glLightModelf(GLenum pname, GLfloat param);
GLAPI void APIENTRY glLightModelfv(GLenum pname, const GLfloat *params);
void APIENTRY gl_dispatch_stub_165(GLenum pname, GLint param);
void APIENTRY gl_dispatch_stub_166(GLenum pname, const GLint *params);
void APIENTRY gl_dispatch_stub_167(GLint factor, GLushort pattern);
GLAPI void APIENTRY glLineWidth(GLfloat width);
GLAPI void APIENTRY glMaterialf(GLenum face, GLenum pname, GLfloat param);
GLAPI void APIENTRY glMaterialfv(GLenum face, GLenum pname, const GLfloat *params);
void APIENTRY gl_dispatch_stub_171(GLenum face, GLenum pname, GLint param);
void APIENTRY gl_dispatch_stub_172(GLenum face, GLenum pname, const GLint *params);
GLAPI void APIENTRY glPointSize(GLfloat size);
void APIENTRY gl_dispatch_stub_174(GLenum face, GLenum mode);
void APIENTRY gl_dispatch_stub_175(const GLubyte *mask);
GLAPI void APIENTRY glScissor(GLint x, GLint y, GLsizei width, GLsizei height);
GLAPI void APIENTRY glShadeModel(GLenum mode);
GLAPI void APIENTRY glTexParameterf(GLenum target, GLenum pname, GLfloat param);
GLAPI void APIENTRY glTexParameterfv(GLenum target, GLenum pname, const GLfloat *params);
GLAPI void APIENTRY glTexParameteri(GLenum target, GLenum pname, GLint param);
GLAPI void APIENTRY glTexParameteriv(GLenum target, GLenum pname, const GLint *params);
void APIENTRY gl_dispatch_stub_182(GLenum target, GLint level, GLint internalformat, GLsizei width, GLint border, GLenum format, GLenum type, const GLvoid *pixels);
GLAPI void APIENTRY glTexImage2D(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const GLvoid *pixels);
GLAPI void APIENTRY glTexEnvf(GLenum target, GLenum pname, GLfloat param);
GLAPI void APIENTRY glTexEnvfv(GLenum target, GLenum pname, const GLfloat *params);
GLAPI void APIENTRY glTexEnvi(GLenum target, GLenum pname, GLint param);
GLAPI void APIENTRY glTexEnviv(GLenum target, GLenum pname, const GLint *params);
void APIENTRY gl_dispatch_stub_188(GLenum coord, GLenum pname, GLdouble param);
void APIENTRY gl_dispatch_stub_189(GLenum coord, GLenum pname, const GLdouble *params);
void APIENTRY gl_dispatch_stub_190(GLenum coord, GLenum pname, GLfloat param);
GLAPI void APIENTRY glTexGenfOES(GLenum coord, GLenum pname, GLfloat param);
void APIENTRY gl_dispatch_stub_191(GLenum coord, GLenum pname, const GLfloat *params);
GLAPI void APIENTRY glTexGenfvOES(GLenum coord, GLenum pname, const GLfloat *params);
void APIENTRY gl_dispatch_stub_192(GLenum coord, GLenum pname, GLint param);
GLAPI void APIENTRY glTexGeniOES(GLenum coord, GLenum pname, GLint param);
void APIENTRY gl_dispatch_stub_193(GLenum coord, GLenum pname, const GLint *params);
GLAPI void APIENTRY glTexGenivOES(GLenum coord, GLenum pname, const GLint *params);
void APIENTRY gl_dispatch_stub_194(GLsizei size, GLenum type, GLfloat *buffer);
void APIENTRY gl_dispatch_stub_195(GLsizei size, GLuint *buffer);
GLint APIENTRY gl_dispatch_stub_196(GLenum mode);
void APIENTRY gl_dispatch_stub_197(void);
void APIENTRY gl_dispatch_stub_198(GLuint name);
void APIENTRY gl_dispatch_stub_199(GLfloat token);
void APIENTRY gl_dispatch_stub_200(void);
void APIENTRY gl_dispatch_stub_201(GLuint name);
void APIENTRY gl_dispatch_stub_202(GLenum mode);
GLAPI void APIENTRY glClear(GLbitfield mask);
void APIENTRY gl_dispatch_stub_204(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha);
void APIENTRY gl_dispatch_stub_205(GLfloat c);
GLAPI void APIENTRY glClearColor(GLclampf red, GLclampf green, GLclampf blue, GLclampf alpha);
GLAPI void APIENTRY glClearStencil(GLint s);
void APIENTRY gl_dispatch_stub_208(GLclampd depth);
GLAPI void APIENTRY glStencilMask(GLuint mask);
GLAPI void APIENTRY glColorMask(GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha);
GLAPI void APIENTRY glDepthMask(GLboolean flag);
void APIENTRY gl_dispatch_stub_212(GLuint mask);
void APIENTRY gl_dispatch_stub_213(GLenum op, GLfloat value);
GLAPI void APIENTRY glDisable(GLenum cap);
GLAPI void APIENTRY glEnable(GLenum cap);
GLAPI void APIENTRY glFinish(void);
GLAPI void APIENTRY glFlush(void);
void APIENTRY gl_dispatch_stub_218(void);
void APIENTRY gl_dispatch_stub_219(GLbitfield mask);
void APIENTRY gl_dispatch_stub_220(GLenum target, GLdouble u1, GLdouble u2, GLint stride, GLint order, const GLdouble *points);
void APIENTRY gl_dispatch_stub_221(GLenum target, GLfloat u1, GLfloat u2, GLint stride, GLint order, const GLfloat *points);
void APIENTRY gl_dispatch_stub_222(GLenum target, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, const GLdouble *points);
void APIENTRY gl_dispatch_stub_223(GLenum target, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, const GLfloat *points);
void APIENTRY gl_dispatch_stub_224(GLint un, GLdouble u1, GLdouble u2);
void APIENTRY gl_dispatch_stub_225(GLint un, GLfloat u1, GLfloat u2);
void APIENTRY gl_dispatch_stub_226(GLint un, GLdouble u1, GLdouble u2, GLint vn, GLdouble v1, GLdouble v2);
void APIENTRY gl_dispatch_stub_227(GLint un, GLfloat u1, GLfloat u2, GLint vn, GLfloat v1, GLfloat v2);
void APIENTRY gl_dispatch_stub_228(GLdouble u);
void APIENTRY gl_dispatch_stub_229(const GLdouble *u);
void APIENTRY gl_dispatch_stub_230(GLfloat u);
void APIENTRY gl_dispatch_stub_231(const GLfloat *u);
void APIENTRY gl_dispatch_stub_232(GLdouble u, GLdouble v);
void APIENTRY gl_dispatch_stub_233(const GLdouble *u);
void APIENTRY gl_dispatch_stub_234(GLfloat u, GLfloat v);
void APIENTRY gl_dispatch_stub_235(const GLfloat *u);
void APIENTRY gl_dispatch_stub_236(GLenum mode, GLint i1, GLint i2);
void APIENTRY gl_dispatch_stub_237(GLint i);
void APIENTRY gl_dispatch_stub_238(GLenum mode, GLint i1, GLint i2, GLint j1, GLint j2);
void APIENTRY gl_dispatch_stub_239(GLint i, GLint j);
GLAPI void APIENTRY glAlphaFunc(GLenum func, GLclampf ref);
GLAPI void APIENTRY glBlendFunc(GLenum sfactor, GLenum dfactor);
GLAPI void APIENTRY glLogicOp(GLenum opcode);
GLAPI void APIENTRY glStencilFunc(GLenum func, GLint ref, GLuint mask);
GLAPI void APIENTRY glStencilOp(GLenum fail, GLenum zfail, GLenum zpass);
GLAPI void APIENTRY glDepthFunc(GLenum func);
void APIENTRY gl_dispatch_stub_246(GLfloat xfactor, GLfloat yfactor);
void APIENTRY gl_dispatch_stub_247(GLenum pname, GLfloat param);
void APIENTRY gl_dispatch_stub_248(GLenum pname, GLint param);
void APIENTRY gl_dispatch_stub_249(GLenum pname, GLfloat param);
GLAPI void APIENTRY glPixelStorei(GLenum pname, GLint param);
void APIENTRY gl_dispatch_stub_251(GLenum map, GLsizei mapsize, const GLfloat *values);
void APIENTRY gl_dispatch_stub_252(GLenum map, GLsizei mapsize, const GLuint *values);
void APIENTRY gl_dispatch_stub_253(GLenum map, GLsizei mapsize, const GLushort *values);
void APIENTRY gl_dispatch_stub_254(GLenum mode);
void APIENTRY gl_dispatch_stub_255(GLint x, GLint y, GLsizei width, GLsizei height, GLenum type);
GLAPI void APIENTRY glReadPixels(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLvoid *pixels);
void APIENTRY gl_dispatch_stub_257(GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *pixels);
GLAPI void APIENTRY glGetBooleanv(GLenum pname, GLboolean *params);
void APIENTRY gl_dispatch_stub_259(GLenum plane, GLdouble *equation);
void APIENTRY gl_dispatch_stub_260(GLenum pname, GLdouble *params);
GLAPI GLenum APIENTRY glGetError(void);
GLAPI void APIENTRY glGetFloatv(GLenum pname, GLfloat *params);
GLAPI void APIENTRY glGetIntegerv(GLenum pname, GLint *params);
GLAPI void APIENTRY glGetLightfv(GLenum light, GLenum pname, GLfloat *params);
void APIENTRY gl_dispatch_stub_265(GLenum light, GLenum pname, GLint *params);
void APIENTRY gl_dispatch_stub_266(GLenum target, GLenum query, GLdouble *v);
void APIENTRY gl_dispatch_stub_267(GLenum target, GLenum query, GLfloat *v);
void APIENTRY gl_dispatch_stub_268(GLenum target, GLenum query, GLint *v);
GLAPI void APIENTRY glGetMaterialfv(GLenum face, GLenum pname, GLfloat *params);
void APIENTRY gl_dispatch_stub_270(GLenum face, GLenum pname, GLint *params);
void APIENTRY gl_dispatch_stub_271(GLenum map, GLfloat *values);
void APIENTRY gl_dispatch_stub_272(GLenum map, GLuint *values);
void APIENTRY gl_dispatch_stub_273(GLenum map, GLushort *values);
void APIENTRY gl_dispatch_stub_274(GLubyte *mask);
GLAPI const GLubyte * APIENTRY glGetString(GLenum name);
GLAPI void APIENTRY glGetTexEnvfv(GLenum target, GLenum pname, GLfloat *params);
GLAPI void APIENTRY glGetTexEnviv(GLenum target, GLenum pname, GLint *params);
void APIENTRY gl_dispatch_stub_278(GLenum coord, GLenum pname, GLdouble *params);
void APIENTRY gl_dispatch_stub_279(GLenum coord, GLenum pname, GLfloat *params);
GLAPI void APIENTRY glGetTexGenfvOES(GLenum coord, GLenum pname, GLfloat *params);
void APIENTRY gl_dispatch_stub_280(GLenum coord, GLenum pname, GLint *params);
GLAPI void APIENTRY glGetTexGenivOES(GLenum coord, GLenum pname, GLint *params);
void APIENTRY gl_dispatch_stub_281(GLenum target, GLint level, GLenum format, GLenum type, GLvoid *pixels);
GLAPI void APIENTRY glGetTexParameterfv(GLenum target, GLenum pname, GLfloat *params);
GLAPI void APIENTRY glGetTexParameteriv(GLenum target, GLenum pname, GLint *params);
void APIENTRY gl_dispatch_stub_284(GLenum target, GLint level, GLenum pname, GLfloat *params);
void APIENTRY gl_dispatch_stub_285(GLenum target, GLint level, GLenum pname, GLint *params);
GLAPI GLboolean APIENTRY glIsEnabled(GLenum cap);
GLboolean APIENTRY gl_dispatch_stub_287(GLuint list);
void APIENTRY gl_dispatch_stub_288(GLclampd zNear, GLclampd zFar);
void APIENTRY gl_dispatch_stub_289(GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar);
GLAPI void APIENTRY glLoadIdentity(void);
GLAPI void APIENTRY glLoadMatrixf(const GLfloat *m);
void APIENTRY gl_dispatch_stub_292(const GLdouble *m);
GLAPI void APIENTRY glMatrixMode(GLenum mode);
GLAPI void APIENTRY glMultMatrixf(const GLfloat *m);
void APIENTRY gl_dispatch_stub_295(const GLdouble *m);
void APIENTRY gl_dispatch_stub_296(GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar);
GLAPI void APIENTRY glPopMatrix(void);
GLAPI void APIENTRY glPushMatrix(void);
void APIENTRY gl_dispatch_stub_299(GLdouble angle, GLdouble x, GLdouble y, GLdouble z);
GLAPI void APIENTRY glRotatef(GLfloat angle, GLfloat x, GLfloat y, GLfloat z);
void APIENTRY gl_dispatch_stub_301(GLdouble x, GLdouble y, GLdouble z);
GLAPI void APIENTRY glScalef(GLfloat x, GLfloat y, GLfloat z);
void APIENTRY gl_dispatch_stub_303(GLdouble x, GLdouble y, GLdouble z);
GLAPI void APIENTRY glTranslatef(GLfloat x, GLfloat y, GLfloat z);
GLAPI void APIENTRY glViewport(GLint x, GLint y, GLsizei width, GLsizei height);
void APIENTRY gl_dispatch_stub_306(GLint i);
GLAPI void APIENTRY glBindTexture(GLenum target, GLuint texture);
GLAPI void APIENTRY glColorPointer(GLint size, GLenum type, GLsizei stride, const GLvoid *pointer);
GLAPI void APIENTRY glDisableClientState(GLenum array);
GLAPI void APIENTRY glDrawArrays(GLenum mode, GLint first, GLsizei count);
GLAPI void APIENTRY glDrawElements(GLenum mode, GLsizei count, GLenum type, const GLvoid *indices);
void APIENTRY gl_dispatch_stub_312(GLsizei stride, const GLvoid *pointer);
GLAPI void APIENTRY glEnableClientState(GLenum array);
void APIENTRY gl_dispatch_stub_314(GLenum type, GLsizei stride, const GLvoid *pointer);
void APIENTRY gl_dispatch_stub_315(GLubyte c);
void APIENTRY gl_dispatch_stub_316(const GLubyte *c);
void APIENTRY gl_dispatch_stub_317(GLenum format, GLsizei stride, const GLvoid *pointer);
GLAPI void APIENTRY glNormalPointer(GLenum type, GLsizei stride, const GLvoid *pointer);
GLAPI void APIENTRY glPolygonOffset(GLfloat factor, GLfloat units);
GLAPI void APIENTRY glTexCoordPointer(GLint size, GLenum type, GLsizei stride, const GLvoid *pointer);
GLAPI void APIENTRY glVertexPointer(GLint size, GLenum type, GLsizei stride, const GLvoid *pointer);
GLboolean APIENTRY gl_dispatch_stub_322(GLsizei n, const GLuint *textures, GLboolean *residences);
void APIENTRY gl_dispatch_stub_323(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border);
GLAPI void APIENTRY glCopyTexImage2D(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border);
void APIENTRY gl_dispatch_stub_325(GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width);
GLAPI void APIENTRY glCopyTexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height);
GLAPI void APIENTRY glDeleteTextures(GLsizei n, const GLuint *textures);
GLAPI void APIENTRY glGenTextures(GLsizei n, GLuint *textures);
GLAPI void APIENTRY glGetPointerv(GLenum pname, GLvoid **params);
GLAPI GLboolean APIENTRY glIsTexture(GLuint texture);
void APIENTRY gl_dispatch_stub_331(GLsizei n, const GLuint *textures, const GLclampf *priorities);
void APIENTRY gl_dispatch_stub_332(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const GLvoid *pixels);
GLAPI void APIENTRY glTexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *pixels);
void APIENTRY gl_dispatch_stub_334(void);
void APIENTRY gl_dispatch_stub_335(GLbitfield mask);
void APIENTRY gl_dispatch_stub_336(GLclampf red, GLclampf green, GLclampf blue, GLclampf alpha);
void APIENTRY gl_dispatch_stub_337(GLenum mode);
GLAPI void APIENTRY glBlendEquationOES(GLenum mode);
void APIENTRY gl_dispatch_stub_338(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const GLvoid *indices);
void APIENTRY gl_dispatch_stub_339(GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const GLvoid *table);
void APIENTRY gl_dispatch_stub_340(GLenum target, GLenum pname, const GLfloat *params);
void APIENTRY gl_dispatch_stub_341(GLenum target, GLenum pname, const GLint *params);
void APIENTRY gl_dispatch_stub_342(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width);
void APIENTRY gl_dispatch_stub_343(GLenum target, GLenum format, GLenum type, GLvoid *table);
void APIENTRY gl_dispatch_stub_344(GLenum target, GLenum pname, GLfloat *params);
void APIENTRY gl_dispatch_stub_345(GLenum target, GLenum pname, GLint *params);
void APIENTRY gl_dispatch_stub_346(GLenum target, GLsizei start, GLsizei count, GLenum format, GLenum type, const GLvoid *data);
void APIENTRY gl_dispatch_stub_347(GLenum target, GLsizei start, GLint x, GLint y, GLsizei width);
void APIENTRY gl_dispatch_stub_348(GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const GLvoid *image);
void APIENTRY gl_dispatch_stub_349(GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *image);
void APIENTRY gl_dispatch_stub_350(GLenum target, GLenum pname, GLfloat params);
void APIENTRY gl_dispatch_stub_351(GLenum target, GLenum pname, const GLfloat *params);
void APIENTRY gl_dispatch_stub_352(GLenum target, GLenum pname, GLint params);
void APIENTRY gl_dispatch_stub_353(GLenum target, GLenum pname, const GLint *params);
void APIENTRY gl_dispatch_stub_354(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width);
void APIENTRY gl_dispatch_stub_355(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height);
void APIENTRY gl_dispatch_stub_356(GLenum target, GLenum format, GLenum type, GLvoid *image);
void APIENTRY gl_dispatch_stub_357(GLenum target, GLenum pname, GLfloat *params);
void APIENTRY gl_dispatch_stub_358(GLenum target, GLenum pname, GLint *params);
void APIENTRY gl_dispatch_stub_359(GLenum target, GLenum format, GLenum type, GLvoid *row, GLvoid *column, GLvoid *span);
void APIENTRY gl_dispatch_stub_360(GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *row, const GLvoid *column);
void APIENTRY gl_dispatch_stub_361(GLenum target, GLboolean reset, GLenum format, GLenum type, GLvoid *values);
void APIENTRY gl_dispatch_stub_362(GLenum target, GLenum pname, GLfloat *params);
void APIENTRY gl_dispatch_stub_363(GLenum target, GLenum pname, GLint *params);
void APIENTRY gl_dispatch_stub_364(GLenum target, GLboolean reset, GLenum format, GLenum type, GLvoid *values);
void APIENTRY gl_dispatch_stub_365(GLenum target, GLenum pname, GLfloat *params);
void APIENTRY gl_dispatch_stub_366(GLenum target, GLenum pname, GLint *params);
void APIENTRY gl_dispatch_stub_367(GLenum target, GLsizei width, GLenum internalformat, GLboolean sink);
void APIENTRY gl_dispatch_stub_368(GLenum target, GLenum internalformat, GLboolean sink);
void APIENTRY gl_dispatch_stub_369(GLenum target);
void APIENTRY gl_dispatch_stub_370(GLenum target);
void APIENTRY gl_dispatch_stub_371(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const GLvoid *pixels);
void APIENTRY gl_dispatch_stub_372(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const GLvoid *pixels);
void APIENTRY gl_dispatch_stub_373(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height);
void APIENTRY gl_dispatch_stub_374(GLenum texture);
GLAPI void APIENTRY glActiveTexture(GLenum texture);
void APIENTRY gl_dispatch_stub_375(GLenum texture);
GLAPI void APIENTRY glClientActiveTexture(GLenum texture);
void APIENTRY gl_dispatch_stub_376(GLenum target, GLdouble s);
void APIENTRY gl_dispatch_stub_377(GLenum target, const GLdouble *v);
void APIENTRY gl_dispatch_stub_378(GLenum target, GLfloat s);
void APIENTRY gl_dispatch_stub_379(GLenum target, const GLfloat *v);
void APIENTRY gl_dispatch_stub_380(GLenum target, GLint s);
void APIENTRY gl_dispatch_stub_381(GLenum target, const GLint *v);
void APIENTRY gl_dispatch_stub_382(GLenum target, GLshort s);
void APIENTRY gl_dispatch_stub_383(GLenum target, const GLshort *v);
void APIENTRY gl_dispatch_stub_384(GLenum target, GLdouble s, GLdouble t);
void APIENTRY gl_dispatch_stub_385(GLenum target, const GLdouble *v);
void APIENTRY gl_dispatch_stub_386(GLenum target, GLfloat s, GLfloat t);
void APIENTRY gl_dispatch_stub_387(GLenum target, const GLfloat *v);
void APIENTRY gl_dispatch_stub_388(GLenum target, GLint s, GLint t);
void APIENTRY gl_dispatch_stub_389(GLenum target, const GLint *v);
void APIENTRY gl_dispatch_stub_390(GLenum target, GLshort s, GLshort t);
void APIENTRY gl_dispatch_stub_391(GLenum target, const GLshort *v);
void APIENTRY gl_dispatch_stub_392(GLenum target, GLdouble s, GLdouble t, GLdouble r);
void APIENTRY gl_dispatch_stub_393(GLenum target, const GLdouble *v);
void APIENTRY gl_dispatch_stub_394(GLenum target, GLfloat s, GLfloat t, GLfloat r);
void APIENTRY gl_dispatch_stub_395(GLenum target, const GLfloat *v);
void APIENTRY gl_dispatch_stub_396(GLenum target, GLint s, GLint t, GLint r);
void APIENTRY gl_dispatch_stub_397(GLenum target, const GLint *v);
void APIENTRY gl_dispatch_stub_398(GLenum target, GLshort s, GLshort t, GLshort r);
void APIENTRY gl_dispatch_stub_399(GLenum target, const GLshort *v);
void APIENTRY gl_dispatch_stub_400(GLenum target, GLdouble s, GLdouble t, GLdouble r, GLdouble q);
void APIENTRY gl_dispatch_stub_401(GLenum target, const GLdouble *v);
void APIENTRY gl_dispatch_stub_402(GLenum target, GLfloat s, GLfloat t, GLfloat r, GLfloat q);
GLAPI void APIENTRY glMultiTexCoord4f(GLenum target, GLfloat s, GLfloat t, GLfloat r, GLfloat q);
void APIENTRY gl_dispatch_stub_403(GLenum target, const GLfloat *v);
void APIENTRY gl_dispatch_stub_404(GLenum target, GLint s, GLint t, GLint r, GLint q);
void APIENTRY gl_dispatch_stub_405(GLenum target, const GLint *v);
void APIENTRY gl_dispatch_stub_406(GLenum target, GLshort s, GLshort t, GLshort r, GLshort q);
void APIENTRY gl_dispatch_stub_407(GLenum target, const GLshort *v);
void APIENTRY gl_dispatch_stub_408(GLuint program, GLuint shader);
GLuint APIENTRY gl_dispatch_stub_409(void);
GLuint APIENTRY gl_dispatch_stub_410(GLenum type);
void APIENTRY gl_dispatch_stub_411(GLuint program);
void APIENTRY gl_dispatch_stub_412(GLuint program);
void APIENTRY gl_dispatch_stub_413(GLuint program, GLuint shader);
void APIENTRY gl_dispatch_stub_414(GLuint program, GLsizei maxCount, GLsizei *count, GLuint *obj);
void APIENTRY gl_dispatch_stub_415(GLuint program, GLsizei bufSize, GLsizei *length, GLchar *infoLog);
void APIENTRY gl_dispatch_stub_416(GLuint program, GLenum pname, GLint *params);
void APIENTRY gl_dispatch_stub_417(GLuint shader, GLsizei bufSize, GLsizei *length, GLchar *infoLog);
void APIENTRY gl_dispatch_stub_418(GLuint shader, GLenum pname, GLint *params);
GLboolean APIENTRY gl_dispatch_stub_419(GLuint program);
GLboolean APIENTRY gl_dispatch_stub_420(GLuint shader);
void APIENTRY gl_dispatch_stub_421(GLenum face, GLenum func, GLint ref, GLuint mask);
void APIENTRY gl_dispatch_stub_422(GLenum face, GLuint mask);
void APIENTRY gl_dispatch_stub_423(GLenum face, GLenum sfail, GLenum zfail, GLenum zpass);
void APIENTRY gl_dispatch_stub_424(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
void APIENTRY gl_dispatch_stub_425(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
void APIENTRY gl_dispatch_stub_426(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
void APIENTRY gl_dispatch_stub_427(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
void APIENTRY gl_dispatch_stub_428(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
void APIENTRY gl_dispatch_stub_429(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
void APIENTRY gl_dispatch_stub_430(GLenum target, GLenum clamp);
void APIENTRY gl_dispatch_stub_431(GLenum buffer, GLint drawbuffer, GLfloat depth, GLint stencil);
void APIENTRY gl_dispatch_stub_432(GLenum buffer, GLint drawbuffer, const GLfloat *value);
void APIENTRY gl_dispatch_stub_433(GLenum buffer, GLint drawbuffer, const GLint *value);
void APIENTRY gl_dispatch_stub_434(GLenum buffer, GLint drawbuffer, const GLuint *value);
const GLubyte * APIENTRY gl_dispatch_stub_435(GLenum name, GLuint index);
void APIENTRY gl_dispatch_stub_436(GLenum target, GLenum internalFormat, GLuint buffer);
void APIENTRY gl_dispatch_stub_437(GLenum target, GLenum attachment, GLuint texture, GLint level);
void APIENTRY gl_dispatch_stub_438(GLenum target, GLenum pname, GLint64 *params);
void APIENTRY gl_dispatch_stub_439(GLenum cap, GLuint index, GLint64 *data);
void APIENTRY gl_dispatch_stub_440(GLuint index, GLuint divisor);
void APIENTRY gl_dispatch_stub_441(const GLdouble *m);
void APIENTRY gl_dispatch_stub_442(const GLfloat *m);
void APIENTRY gl_dispatch_stub_443(const GLdouble *m);
void APIENTRY gl_dispatch_stub_444(const GLfloat *m);
void APIENTRY gl_dispatch_stub_445(GLclampf value, GLboolean invert);
GLAPI void APIENTRY glSampleCoverage(GLclampf value, GLboolean invert);
void APIENTRY gl_dispatch_stub_446(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const GLvoid *data);
void APIENTRY gl_dispatch_stub_447(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const GLvoid *data);
GLAPI void APIENTRY glCompressedTexImage2D(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const GLvoid *data);
void APIENTRY gl_dispatch_stub_448(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const GLvoid *data);
void APIENTRY gl_dispatch_stub_449(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const GLvoid *data);
void APIENTRY gl_dispatch_stub_450(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const GLvoid *data);
GLAPI void APIENTRY glCompressedTexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const GLvoid *data);
void APIENTRY gl_dispatch_stub_451(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const GLvoid *data);
void APIENTRY gl_dispatch_stub_452(GLenum target, GLint level, GLvoid *img);
void APIENTRY gl_dispatch_stub_453(GLuint index);
void APIENTRY gl_dispatch_stub_454(GLuint index);
void APIENTRY gl_dispatch_stub_455(GLenum target, GLuint index, GLdouble *params);
void APIENTRY gl_dispatch_stub_456(GLenum target, GLuint index, GLfloat *params);
void APIENTRY gl_dispatch_stub_457(GLenum target, GLuint index, GLdouble *params);
void APIENTRY gl_dispatch_stub_458(GLenum target, GLuint index, GLfloat *params);
void APIENTRY gl_dispatch_stub_459(GLenum target, GLenum pname, GLvoid *string);
void APIENTRY gl_dispatch_stub_460(GLenum target, GLenum pname, GLint *params);
void APIENTRY gl_dispatch_stub_461(GLuint index, GLenum pname, GLdouble *params);
void APIENTRY gl_dispatch_stub_462(GLuint index, GLenum pname, GLfloat *params);
void APIENTRY gl_dispatch_stub_463(GLuint index, GLenum pname, GLint *params);
void APIENTRY gl_dispatch_stub_464(GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
void APIENTRY gl_dispatch_stub_465(GLenum target, GLuint index, const GLdouble *params);
void APIENTRY gl_dispatch_stub_466(GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
void APIENTRY gl_dispatch_stub_467(GLenum target, GLuint index, const GLfloat *params);
void APIENTRY gl_dispatch_stub_468(GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
void APIENTRY gl_dispatch_stub_469(GLenum target, GLuint index, const GLdouble *params);
void APIENTRY gl_dispatch_stub_470(GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
void APIENTRY gl_dispatch_stub_471(GLenum target, GLuint index, const GLfloat *params);
void APIENTRY gl_dispatch_stub_472(GLenum target, GLenum format, GLsizei len, const GLvoid *string);
void APIENTRY gl_dispatch_stub_473(GLuint index, GLdouble x);
void APIENTRY gl_dispatch_stub_474(GLuint index, const GLdouble *v);
void APIENTRY gl_dispatch_stub_475(GLuint index, GLfloat x);
void APIENTRY gl_dispatch_stub_476(GLuint index, const GLfloat *v);
void APIENTRY gl_dispatch_stub_477(GLuint index, GLshort x);
void APIENTRY gl_dispatch_stub_478(GLuint index, const GLshort *v);
void APIENTRY gl_dispatch_stub_479(GLuint index, GLdouble x, GLdouble y);
void APIENTRY gl_dispatch_stub_480(GLuint index, const GLdouble *v);
void APIENTRY gl_dispatch_stub_481(GLuint index, GLfloat x, GLfloat y);
void APIENTRY gl_dispatch_stub_482(GLuint index, const GLfloat *v);
void APIENTRY gl_dispatch_stub_483(GLuint index, GLshort x, GLshort y);
void APIENTRY gl_dispatch_stub_484(GLuint index, const GLshort *v);
void APIENTRY gl_dispatch_stub_485(GLuint index, GLdouble x, GLdouble y, GLdouble z);
void APIENTRY gl_dispatch_stub_486(GLuint index, const GLdouble *v);
void APIENTRY gl_dispatch_stub_487(GLuint index, GLfloat x, GLfloat y, GLfloat z);
void APIENTRY gl_dispatch_stub_488(GLuint index, const GLfloat *v);
void APIENTRY gl_dispatch_stub_489(GLuint index, GLshort x, GLshort y, GLshort z);
void APIENTRY gl_dispatch_stub_490(GLuint index, const GLshort *v);
void APIENTRY gl_dispatch_stub_491(GLuint index, const GLbyte *v);
void APIENTRY gl_dispatch_stub_492(GLuint index, const GLint *v);
void APIENTRY gl_dispatch_stub_493(GLuint index, const GLshort *v);
void APIENTRY gl_dispatch_stub_494(GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w);
void APIENTRY gl_dispatch_stub_495(GLuint index, const GLubyte *v);
void APIENTRY gl_dispatch_stub_496(GLuint index, const GLuint *v);
void APIENTRY gl_dispatch_stub_497(GLuint index, const GLushort *v);
void APIENTRY gl_dispatch_stub_498(GLuint index, const GLbyte *v);
void APIENTRY gl_dispatch_stub_499(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
void APIENTRY gl_dispatch_stub_500(GLuint index, const GLdouble *v);
void APIENTRY gl_dispatch_stub_501(GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
void APIENTRY gl_dispatch_stub_502(GLuint index, const GLfloat *v);
void APIENTRY gl_dispatch_stub_503(GLuint index, const GLint *v);
void APIENTRY gl_dispatch_stub_504(GLuint index, GLshort x, GLshort y, GLshort z, GLshort w);
void APIENTRY gl_dispatch_stub_505(GLuint index, const GLshort *v);
void APIENTRY gl_dispatch_stub_506(GLuint index, const GLubyte *v);
void APIENTRY gl_dispatch_stub_507(GLuint index, const GLuint *v);
void APIENTRY gl_dispatch_stub_508(GLuint index, const GLushort *v);
void APIENTRY gl_dispatch_stub_509(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const GLvoid *pointer);
void APIENTRY gl_dispatch_stub_510(GLenum target, GLuint buffer);
GLAPI void APIENTRY glBindBuffer(GLenum target, GLuint buffer);
void APIENTRY gl_dispatch_stub_511(GLenum target, GLsizeiptrARB size, const GLvoid *data, GLenum usage);
GLAPI void APIENTRY glBufferData(GLenum target, GLsizeiptr size, const GLvoid *data, GLenum usage);
void APIENTRY gl_dispatch_stub_512(GLenum target, GLintptrARB offset, GLsizeiptrARB size, const GLvoid *data);
GLAPI void APIENTRY glBufferSubData(GLenum target, GLintptr offset, GLsizeiptr size, const GLvoid *data);
void APIENTRY gl_dispatch_stub_513(GLsizei n, const GLuint *buffer);
GLAPI void APIENTRY glDeleteBuffers(GLsizei n, const GLuint *buffer);
void APIENTRY gl_dispatch_stub_514(GLsizei n, GLuint *buffer);
GLAPI void APIENTRY glGenBuffers(GLsizei n, GLuint *buffer);
void APIENTRY gl_dispatch_stub_515(GLenum target, GLenum pname, GLint *params);
GLAPI void APIENTRY glGetBufferParameteriv(GLenum target, GLenum pname, GLint *params);
void APIENTRY gl_dispatch_stub_516(GLenum target, GLenum pname, GLvoid **params);
GLAPI void APIENTRY glGetBufferPointervOES(GLenum target, GLenum pname, GLvoid **params);
void APIENTRY gl_dispatch_stub_517(GLenum target, GLintptrARB offset, GLsizeiptrARB size, GLvoid *data);
GLboolean APIENTRY gl_dispatch_stub_518(GLuint buffer);
GLAPI GLboolean APIENTRY glIsBuffer(GLuint buffer);
GLvoid * APIENTRY gl_dispatch_stub_519(GLenum target, GLenum access);
GLAPI GLvoid * APIENTRY glMapBufferOES(GLenum target, GLenum access);
GLboolean APIENTRY gl_dispatch_stub_520(GLenum target);
GLAPI GLboolean APIENTRY glUnmapBufferOES(GLenum target);
void APIENTRY gl_dispatch_stub_521(GLenum target, GLuint id);
void APIENTRY gl_dispatch_stub_522(GLsizei n, const GLuint *ids);
void APIENTRY gl_dispatch_stub_523(GLenum target);
void APIENTRY gl_dispatch_stub_524(GLsizei n, GLuint *ids);
void APIENTRY gl_dispatch_stub_525(GLuint id, GLenum pname, GLint *params);
void APIENTRY gl_dispatch_stub_526(GLuint id, GLenum pname, GLuint *params);
void APIENTRY gl_dispatch_stub_527(GLenum target, GLenum pname, GLint *params);
GLboolean APIENTRY gl_dispatch_stub_528(GLuint id);
void APIENTRY gl_dispatch_stub_529(GLhandleARB containerObj, GLhandleARB obj);
void APIENTRY gl_dispatch_stub_530(GLhandleARB shader);
GLhandleARB APIENTRY gl_dispatch_stub_531(void);
GLhandleARB APIENTRY gl_dispatch_stub_532(GLenum shaderType);
void APIENTRY gl_dispatch_stub_533(GLhandleARB obj);
void APIENTRY gl_dispatch_stub_534(GLhandleARB containerObj, GLhandleARB attachedObj);
void APIENTRY gl_dispatch_stub_535(GLhandleARB program, GLuint index, GLsizei bufSize, GLsizei *length, GLint *size, GLenum *type, GLcharARB *name);
void APIENTRY gl_dispatch_stub_536(GLhandleARB containerObj, GLsizei maxLength, GLsizei *length, GLhandleARB *infoLog);
GLhandleARB APIENTRY gl_dispatch_stub_537(GLenum pname);
void APIENTRY gl_dispatch_stub_538(GLhandleARB obj, GLsizei maxLength, GLsizei *length, GLcharARB *infoLog);
void APIENTRY gl_dispatch_stub_539(GLhandleARB obj, GLenum pname, GLfloat *params);
void APIENTRY gl_dispatch_stub_540(GLhandleARB obj, GLenum pname, GLint *params);
void APIENTRY gl_dispatch_stub_541(GLhandleARB shader, GLsizei bufSize, GLsizei *length, GLcharARB *source);
GLint APIENTRY gl_dispatch_stub_542(GLhandleARB program, const GLcharARB *name);
void APIENTRY gl_dispatch_stub_543(GLhandleARB program, GLint location, GLfloat *params);
void APIENTRY gl_dispatch_stub_544(GLhandleARB program, GLint location, GLint *params);
void APIENTRY gl_dispatch_stub_545(GLhandleARB program);
void APIENTRY gl_dispatch_stub_546(GLhandleARB shader, GLsizei count, const GLcharARB **string, const GLint *length);
void APIENTRY gl_dispatch_stub_547(GLint location, GLfloat v0);
void APIENTRY gl_dispatch_stub_548(GLint location, GLsizei count, const GLfloat *value);
void APIENTRY gl_dispatch_stub_549(GLint location, GLint v0);
void APIENTRY gl_dispatch_stub_550(GLint location, GLsizei count, const GLint *value);
void APIENTRY gl_dispatch_stub_551(GLint location, GLfloat v0, GLfloat v1);
void APIENTRY gl_dispatch_stub_552(GLint location, GLsizei count, const GLfloat *value);
void APIENTRY gl_dispatch_stub_553(GLint location, GLint v0, GLint v1);
void APIENTRY gl_dispatch_stub_554(GLint location, GLsizei count, const GLint *value);
void APIENTRY gl_dispatch_stub_555(GLint location, GLfloat v0, GLfloat v1, GLfloat v2);
void APIENTRY gl_dispatch_stub_556(GLint location, GLsizei count, const GLfloat *value);
void APIENTRY gl_dispatch_stub_557(GLint location, GLint v0, GLint v1, GLint v2);
void APIENTRY gl_dispatch_stub_558(GLint location, GLsizei count, const GLint *value);
void APIENTRY gl_dispatch_stub_559(GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3);
void APIENTRY gl_dispatch_stub_560(GLint location, GLsizei count, const GLfloat *value);
void APIENTRY gl_dispatch_stub_561(GLint location, GLint v0, GLint v1, GLint v2, GLint v3);
void APIENTRY gl_dispatch_stub_562(GLint location, GLsizei count, const GLint *value);
void APIENTRY gl_dispatch_stub_563(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
void APIENTRY gl_dispatch_stub_564(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
void APIENTRY gl_dispatch_stub_565(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
void APIENTRY gl_dispatch_stub_566(GLhandleARB program);
void APIENTRY gl_dispatch_stub_567(GLhandleARB program);
void APIENTRY gl_dispatch_stub_568(GLhandleARB program, GLuint index, const GLcharARB *name);
void APIENTRY gl_dispatch_stub_569(GLhandleARB program, GLuint index, GLsizei bufSize, GLsizei *length, GLint *size, GLenum *type, GLcharARB *name);
GLint APIENTRY gl_dispatch_stub_570(GLhandleARB program, const GLcharARB *name);
void APIENTRY gl_dispatch_stub_571(GLsizei n, const GLenum *bufs);
void APIENTRY gl_dispatch_stub_572(GLenum target, GLenum clamp);
void APIENTRY gl_dispatch_stub_573(GLenum mode, GLint first, GLsizei count, GLsizei primcount);
void APIENTRY gl_dispatch_stub_574(GLenum mode, GLsizei count, GLenum type, const GLvoid *indices, GLsizei primcount);
void APIENTRY gl_dispatch_stub_575(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height);
void APIENTRY gl_dispatch_stub_576(GLenum target, GLenum attachment, GLuint texture, GLint level);
void APIENTRY gl_dispatch_stub_577(GLenum target, GLenum attachment, GLuint texture, GLint level, GLenum face);
void APIENTRY gl_dispatch_stub_578(GLuint program, GLenum pname, GLint value);
void APIENTRY gl_dispatch_stub_579(GLuint index, GLuint divisor);
void APIENTRY gl_dispatch_stub_580(GLenum target, GLintptr offset, GLsizeiptr length);
GLvoid * APIENTRY gl_dispatch_stub_581(GLenum target, GLintptr offset, GLsizeiptr length, GLbitfield access);
void APIENTRY gl_dispatch_stub_582(GLenum target, GLenum internalFormat, GLuint buffer);
void APIENTRY gl_dispatch_stub_583(GLuint array);
void APIENTRY gl_dispatch_stub_584(GLsizei n, GLuint *arrays);
void APIENTRY gl_dispatch_stub_585(GLenum readTarget, GLenum writeTarget, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size);
GLenum APIENTRY gl_dispatch_stub_586(GLsync sync, GLbitfield flags, GLuint64 timeout);
void APIENTRY gl_dispatch_stub_587(GLsync sync);
GLsync APIENTRY gl_dispatch_stub_588(GLenum condition, GLbitfield flags);
void APIENTRY gl_dispatch_stub_589(GLenum pname, GLint64 *params);
void APIENTRY gl_dispatch_stub_590(GLsync sync, GLenum pname, GLsizei bufSize, GLsizei *length, GLint *values);
GLboolean APIENTRY gl_dispatch_stub_591(GLsync sync);
void APIENTRY gl_dispatch_stub_592(GLsync sync, GLbitfield flags, GLuint64 timeout);
void APIENTRY gl_dispatch_stub_593(GLenum mode, GLsizei count, GLenum type, const GLvoid *indices, GLint basevertex);
void APIENTRY gl_dispatch_stub_594(GLenum mode, GLsizei count, GLenum type, const GLvoid *indices, GLsizei primcount, GLint basevertex);
void APIENTRY gl_dispatch_stub_595(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const GLvoid *indices, GLint basevertex);
void APIENTRY gl_dispatch_stub_596(GLenum mode, const GLsizei *count, GLenum type, const GLvoid **indices, GLsizei primcount, const GLint *basevertex);
void APIENTRY gl_dispatch_stub_597(GLuint buf, GLenum modeRGB, GLenum modeA);
void APIENTRY gl_dispatch_stub_598(GLuint buf, GLenum mode);
void APIENTRY gl_dispatch_stub_599(GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcA, GLenum dstA);
void APIENTRY gl_dispatch_stub_600(GLuint buf, GLenum src, GLenum dst);
void APIENTRY gl_dispatch_stub_601(GLuint unit, GLuint sampler);
void APIENTRY gl_dispatch_stub_602(GLsizei count, const GLuint *samplers);
void APIENTRY gl_dispatch_stub_603(GLsizei count, GLuint *samplers);
void APIENTRY gl_dispatch_stub_604(GLuint sampler, GLenum pname, GLint *params);
void APIENTRY gl_dispatch_stub_605(GLuint sampler, GLenum pname, GLuint *params);
void APIENTRY gl_dispatch_stub_606(GLuint sampler, GLenum pname, GLfloat *params);
void APIENTRY gl_dispatch_stub_607(GLuint sampler, GLenum pname, GLint *params);
GLboolean APIENTRY gl_dispatch_stub_608(GLuint sampler);
void APIENTRY gl_dispatch_stub_609(GLuint sampler, GLenum pname, const GLint *params);
void APIENTRY gl_dispatch_stub_610(GLuint sampler, GLenum pname, const GLuint *params);
void APIENTRY gl_dispatch_stub_611(GLuint sampler, GLenum pname, GLfloat param);
void APIENTRY gl_dispatch_stub_612(GLuint sampler, GLenum pname, const GLfloat *params);
void APIENTRY gl_dispatch_stub_613(GLuint sampler, GLenum pname, GLint param);
void APIENTRY gl_dispatch_stub_614(GLuint sampler, GLenum pname, const GLint *params);
void APIENTRY gl_dispatch_stub_615(GLenum target, GLuint id);
void APIENTRY gl_dispatch_stub_616(GLsizei n, const GLuint *ids);
void APIENTRY gl_dispatch_stub_617(GLenum mode, GLuint id);
void APIENTRY gl_dispatch_stub_618(GLsizei n, GLuint *ids);
GLboolean APIENTRY gl_dispatch_stub_619(GLuint id);
void APIENTRY gl_dispatch_stub_620(void);
void APIENTRY gl_dispatch_stub_621(void);
GLAPI void APIENTRY glClearDepthf(GLclampf depth);
GLAPI void APIENTRY glClearDepthfOES(GLclampf depth);
GLAPI void APIENTRY glDepthRangef(GLclampf zNear, GLclampf zFar);
GLAPI void APIENTRY glDepthRangefOES(GLclampf zNear, GLclampf zFar);
void APIENTRY gl_dispatch_stub_624(GLenum shadertype, GLenum precisiontype, GLint *range, GLint *precision);
void APIENTRY gl_dispatch_stub_625(void);
void APIENTRY gl_dispatch_stub_626(GLsizei n, const GLuint *shaders, GLenum binaryformat, const GLvoid *binary, GLsizei length);
void APIENTRY gl_dispatch_stub_627(GLuint program, GLsizei bufSize, GLsizei *length, GLenum *binaryFormat, GLvoid *binary);
void APIENTRY gl_dispatch_stub_628(GLuint program, GLenum binaryFormat, const GLvoid *binary, GLsizei length);
void APIENTRY gl_dispatch_stub_629(GLuint program, GLenum pname, GLint value);
GLenum APIENTRY gl_dispatch_stub_630(void);
void APIENTRY gl_dispatch_stub_631(GLenum target, GLenum format, GLenum type, GLsizei bufSize, GLvoid *table);
void APIENTRY gl_dispatch_stub_632(GLenum target, GLint lod, GLsizei bufSize, GLvoid *img);
void APIENTRY gl_dispatch_stub_633(GLenum target, GLenum format, GLenum type, GLsizei bufSize, GLvoid *image);
void APIENTRY gl_dispatch_stub_634(GLenum target, GLboolean reset, GLenum format, GLenum type, GLsizei bufSize, GLvoid *values);
void APIENTRY gl_dispatch_stub_635(GLenum target, GLenum query, GLsizei bufSize, GLdouble *v);
void APIENTRY gl_dispatch_stub_636(GLenum target, GLenum query, GLsizei bufSize, GLfloat *v);
void APIENTRY gl_dispatch_stub_637(GLenum target, GLenum query, GLsizei bufSize, GLint *v);
void APIENTRY gl_dispatch_stub_638(GLenum target, GLboolean reset, GLenum format, GLenum type, GLsizei bufSize, GLvoid *values);
void APIENTRY gl_dispatch_stub_639(GLenum map, GLsizei bufSize, GLfloat *values);
void APIENTRY gl_dispatch_stub_640(GLenum map, GLsizei bufSize, GLuint *values);
void APIENTRY gl_dispatch_stub_641(GLenum map, GLsizei bufSize, GLushort *values);
void APIENTRY gl_dispatch_stub_642(GLsizei bufSize, GLubyte *pattern);
void APIENTRY gl_dispatch_stub_643(GLenum target, GLenum format, GLenum type, GLsizei rowBufSize, GLvoid *row, GLsizei columnBufSize, GLvoid *column, GLvoid *span);
void APIENTRY gl_dispatch_stub_644(GLenum target, GLint level, GLenum format, GLenum type, GLsizei bufSize, GLvoid *img);
void APIENTRY gl_dispatch_stub_645(GLhandleARB program, GLint location, GLsizei bufSize, GLdouble *params);
void APIENTRY gl_dispatch_stub_646(GLhandleARB program, GLint location, GLsizei bufSize, GLfloat *params);
void APIENTRY gl_dispatch_stub_647(GLhandleARB program, GLint location, GLsizei bufSize, GLint *params);
void APIENTRY gl_dispatch_stub_648(GLhandleARB program, GLint location, GLsizei bufSize, GLuint *params);
void APIENTRY gl_dispatch_stub_649(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLsizei bufSize, GLvoid *data);
void APIENTRY gl_dispatch_stub_650(GLfloat factor, GLfloat bias);
GLAPI void APIENTRY glDrawTexfOES(GLfloat x, GLfloat y, GLfloat z, GLfloat width, GLfloat height);
GLAPI void APIENTRY glDrawTexfvOES(const GLfloat *coords);
GLAPI void APIENTRY glDrawTexiOES(GLint x, GLint y, GLint z, GLint width, GLint height);
GLAPI void APIENTRY glDrawTexivOES(const GLint *coords);
GLAPI void APIENTRY glDrawTexsOES(GLshort x, GLshort y, GLshort z, GLshort width, GLshort height);
GLAPI void APIENTRY glDrawTexsvOES(const GLshort *coords);
GLAPI void APIENTRY glDrawTexxOES(GLfixed x, GLfixed y, GLfixed z, GLfixed width, GLfixed height);
GLAPI void APIENTRY glDrawTexxvOES(const GLfixed *coords);
GLAPI void APIENTRY glPointSizePointerOES(GLenum type, GLsizei stride, const GLvoid *pointer);
void APIENTRY gl_dispatch_stub_660(GLenum pname, GLfloat *params);
void APIENTRY gl_dispatch_stub_661(GLenum pname, GLint *params);
void APIENTRY gl_dispatch_stub_662(GLenum pname, GLfloat param);
void APIENTRY gl_dispatch_stub_663(GLenum pname, const GLfloat *params);
void APIENTRY gl_dispatch_stub_664(GLenum pname, GLint param);
void APIENTRY gl_dispatch_stub_665(GLenum pname, const GLint *params);
GLAPI GLbitfield APIENTRY glQueryMatrixxOES(GLfixed *mantissa, GLint *exponent);
void APIENTRY gl_dispatch_stub_667(GLclampf value, GLboolean invert);
void APIENTRY gl_dispatch_stub_668(GLenum pattern);
void APIENTRY gl_dispatch_stub_669(GLint size, GLenum type, GLsizei stride, GLsizei count, const GLvoid *pointer);
void APIENTRY gl_dispatch_stub_670(GLsizei stride, GLsizei count, const GLboolean *pointer);
void APIENTRY gl_dispatch_stub_671(GLenum type, GLsizei stride, GLsizei count, const GLvoid *pointer);
void APIENTRY gl_dispatch_stub_672(GLenum type, GLsizei stride, GLsizei count, const GLvoid *pointer);
void APIENTRY gl_dispatch_stub_673(GLint size, GLenum type, GLsizei stride, GLsizei count, const GLvoid *pointer);
void APIENTRY gl_dispatch_stub_674(GLint size, GLenum type, GLsizei stride, GLsizei count, const GLvoid *pointer);
void APIENTRY gl_dispatch_stub_675(GLenum pname, GLfloat param);
GLAPI void APIENTRY glPointParameterf(GLenum pname, GLfloat param);
void APIENTRY gl_dispatch_stub_676(GLenum pname, const GLfloat *params);
GLAPI void APIENTRY glPointParameterfv(GLenum pname, const GLfloat *params);
void APIENTRY gl_dispatch_stub_677(GLint first, GLsizei count);
void APIENTRY gl_dispatch_stub_678(void);
void APIENTRY gl_dispatch_stub_679(GLbyte red, GLbyte green, GLbyte blue);
void APIENTRY gl_dispatch_stub_680(const GLbyte *v);
void APIENTRY gl_dispatch_stub_681(GLdouble red, GLdouble green, GLdouble blue);
void APIENTRY gl_dispatch_stub_682(const GLdouble *v);
void APIENTRY gl_dispatch_stub_683(GLfloat red, GLfloat green, GLfloat blue);
void APIENTRY gl_dispatch_stub_684(const GLfloat *v);
void APIENTRY gl_dispatch_stub_685(GLint red, GLint green, GLint blue);
void APIENTRY gl_dispatch_stub_686(const GLint *v);
void APIENTRY gl_dispatch_stub_687(GLshort red, GLshort green, GLshort blue);
void APIENTRY gl_dispatch_stub_688(const GLshort *v);
void APIENTRY gl_dispatch_stub_689(GLubyte red, GLubyte green, GLubyte blue);
void APIENTRY gl_dispatch_stub_690(const GLubyte *v);
void APIENTRY gl_dispatch_stub_691(GLuint red, GLuint green, GLuint blue);
void APIENTRY gl_dispatch_stub_692(const GLuint *v);
void APIENTRY gl_dispatch_stub_693(GLushort red, GLushort green, GLushort blue);
void APIENTRY gl_dispatch_stub_694(const GLushort *v);
void APIENTRY gl_dispatch_stub_695(GLint size, GLenum type, GLsizei stride, const GLvoid *pointer);
GLAPI void APIENTRY glMultiDrawArraysEXT(GLenum mode, const GLint *first, const GLsizei *count, GLsizei primcount);
GLAPI void APIENTRY glMultiDrawElementsEXT(GLenum mode, const GLsizei *count, GLenum type, const GLvoid **indices, GLsizei primcount);
void APIENTRY gl_dispatch_stub_698(GLenum type, GLsizei stride, const GLvoid *pointer);
void APIENTRY gl_dispatch_stub_699(GLdouble coord);
void APIENTRY gl_dispatch_stub_700(const GLdouble *coord);
void APIENTRY gl_dispatch_stub_701(GLfloat coord);
void APIENTRY gl_dispatch_stub_702(const GLfloat *coord);
void APIENTRY gl_dispatch_stub_703(GLenum mode);
void APIENTRY gl_dispatch_stub_704(GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha);
GLAPI void APIENTRY glBlendFuncSeparateOES(GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha);
void APIENTRY gl_dispatch_stub_705(void);
void APIENTRY gl_dispatch_stub_706(GLsizei length, const GLvoid *pointer);
void APIENTRY gl_dispatch_stub_707(GLenum stage, GLenum portion, GLenum variable, GLenum input, GLenum mapping, GLenum componentUsage);
void APIENTRY gl_dispatch_stub_708(GLenum stage, GLenum portion, GLenum abOutput, GLenum cdOutput, GLenum sumOutput, GLenum scale, GLenum bias, GLboolean abDotProduct, GLboolean cdDotProduct, GLboolean muxSum);
void APIENTRY gl_dispatch_stub_709(GLenum pname, GLfloat param);
void APIENTRY gl_dispatch_stub_710(GLenum pname, const GLfloat *params);
void APIENTRY gl_dispatch_stub_711(GLenum pname, GLint param);
void APIENTRY gl_dispatch_stub_712(GLenum pname, const GLint *params);
void APIENTRY gl_dispatch_stub_713(GLenum variable, GLenum input, GLenum mapping, GLenum componentUsage);
void APIENTRY gl_dispatch_stub_714(GLenum stage, GLenum portion, GLenum variable, GLenum pname, GLfloat *params);
void APIENTRY gl_dispatch_stub_715(GLenum stage, GLenum portion, GLenum variable, GLenum pname, GLint *params);
void APIENTRY gl_dispatch_stub_716(GLenum stage, GLenum portion, GLenum pname, GLfloat *params);
void APIENTRY gl_dispatch_stub_717(GLenum stage, GLenum portion, GLenum pname, GLint *params);
void APIENTRY gl_dispatch_stub_718(GLenum variable, GLenum pname, GLfloat *params);
void APIENTRY gl_dispatch_stub_719(GLenum variable, GLenum pname, GLint *params);
void APIENTRY gl_dispatch_stub_720(void);
void APIENTRY gl_dispatch_stub_721(GLdouble x, GLdouble y);
void APIENTRY gl_dispatch_stub_722(const GLdouble *v);
void APIENTRY gl_dispatch_stub_723(GLfloat x, GLfloat y);
void APIENTRY gl_dispatch_stub_724(const GLfloat *v);
void APIENTRY gl_dispatch_stub_725(GLint x, GLint y);
void APIENTRY gl_dispatch_stub_726(const GLint *v);
void APIENTRY gl_dispatch_stub_727(GLshort x, GLshort y);
void APIENTRY gl_dispatch_stub_728(const GLshort *v);
void APIENTRY gl_dispatch_stub_729(GLdouble x, GLdouble y, GLdouble z);
void APIENTRY gl_dispatch_stub_730(const GLdouble *v);
void APIENTRY gl_dispatch_stub_731(GLfloat x, GLfloat y, GLfloat z);
void APIENTRY gl_dispatch_stub_732(const GLfloat *v);
void APIENTRY gl_dispatch_stub_733(GLint x, GLint y, GLint z);
void APIENTRY gl_dispatch_stub_734(const GLint *v);
void APIENTRY gl_dispatch_stub_735(GLshort x, GLshort y, GLshort z);
void APIENTRY gl_dispatch_stub_736(const GLshort *v);
void APIENTRY gl_dispatch_stub_737(GLdouble x, GLdouble y, GLdouble z, GLdouble w);
void APIENTRY gl_dispatch_stub_738(const GLdouble *v);
void APIENTRY gl_dispatch_stub_739(GLfloat x, GLfloat y, GLfloat z, GLfloat w);
void APIENTRY gl_dispatch_stub_740(const GLfloat *v);
void APIENTRY gl_dispatch_stub_741(GLint x, GLint y, GLint z, GLint w);
void APIENTRY gl_dispatch_stub_742(const GLint *v);
void APIENTRY gl_dispatch_stub_743(GLshort x, GLshort y, GLshort z, GLshort w);
void APIENTRY gl_dispatch_stub_744(const GLshort *v);
void APIENTRY gl_dispatch_stub_745(const GLenum *mode, const GLint *first, const GLsizei *count, GLsizei primcount, GLint modestride);
void APIENTRY gl_dispatch_stub_746(const GLenum *mode, const GLsizei *count, GLenum type, const GLvoid * const *indices, GLsizei primcount, GLint modestride);
void APIENTRY gl_dispatch_stub_747(GLsizei n, const GLuint *fences);
void APIENTRY gl_dispatch_stub_748(GLuint fence);
void APIENTRY gl_dispatch_stub_749(GLsizei n, GLuint *fences);
void APIENTRY gl_dispatch_stub_750(GLuint fence, GLenum pname, GLint *params);
GLboolean APIENTRY gl_dispatch_stub_751(GLuint fence);
void APIENTRY gl_dispatch_stub_752(GLuint fence, GLenum condition);
GLboolean APIENTRY gl_dispatch_stub_753(GLuint fence);
GLboolean APIENTRY gl_dispatch_stub_754(GLsizei n, const GLuint *ids, GLboolean *residences);
void APIENTRY gl_dispatch_stub_755(GLenum target, GLuint program);
void APIENTRY gl_dispatch_stub_756(GLsizei n, const GLuint *programs);
void APIENTRY gl_dispatch_stub_757(GLenum target, GLuint id, const GLfloat *params);
void APIENTRY gl_dispatch_stub_758(GLsizei n, GLuint *programs);
void APIENTRY gl_dispatch_stub_759(GLenum target, GLuint index, GLenum pname, GLdouble *params);
void APIENTRY gl_dispatch_stub_760(GLenum target, GLuint index, GLenum pname, GLfloat *params);
void APIENTRY gl_dispatch_stub_761(GLuint id, GLenum pname, GLubyte *program);
void APIENTRY gl_dispatch_stub_762(GLuint id, GLenum pname, GLint *params);
void APIENTRY gl_dispatch_stub_763(GLenum target, GLuint address, GLenum pname, GLint *params);
void APIENTRY gl_dispatch_stub_764(GLuint index, GLenum pname, GLvoid **pointer);
void APIENTRY gl_dispatch_stub_765(GLuint index, GLenum pname, GLdouble *params);
void APIENTRY gl_dispatch_stub_766(GLuint index, GLenum pname, GLfloat *params);
void APIENTRY gl_dispatch_stub_767(GLuint index, GLenum pname, GLint *params);
GLboolean APIENTRY gl_dispatch_stub_768(GLuint program);
void APIENTRY gl_dispatch_stub_769(GLenum target, GLuint id, GLsizei len, const GLubyte *program);
void APIENTRY gl_dispatch_stub_770(GLenum target, GLuint index, GLsizei num, const GLdouble *params);
void APIENTRY gl_dispatch_stub_771(GLenum target, GLuint index, GLsizei num, const GLfloat *params);
void APIENTRY gl_dispatch_stub_772(GLsizei n, const GLuint *ids);
void APIENTRY gl_dispatch_stub_773(GLenum target, GLuint address, GLenum matrix, GLenum transform);
void APIENTRY gl_dispatch_stub_774(GLuint index, GLdouble x);
void APIENTRY gl_dispatch_stub_775(GLuint index, const GLdouble *v);
void APIENTRY gl_dispatch_stub_776(GLuint index, GLfloat x);
void APIENTRY gl_dispatch_stub_777(GLuint index, const GLfloat *v);
void APIENTRY gl_dispatch_stub_778(GLuint index, GLshort x);
void APIENTRY gl_dispatch_stub_779(GLuint index, const GLshort *v);
void APIENTRY gl_dispatch_stub_780(GLuint index, GLdouble x, GLdouble y);
void APIENTRY gl_dispatch_stub_781(GLuint index, const GLdouble *v);
void APIENTRY gl_dispatch_stub_782(GLuint index, GLfloat x, GLfloat y);
void APIENTRY gl_dispatch_stub_783(GLuint index, const GLfloat *v);
void APIENTRY gl_dispatch_stub_784(GLuint index, GLshort x, GLshort y);
void APIENTRY gl_dispatch_stub_785(GLuint index, const GLshort *v);
void APIENTRY gl_dispatch_stub_786(GLuint index, GLdouble x, GLdouble y, GLdouble z);
void APIENTRY gl_dispatch_stub_787(GLuint index, const GLdouble *v);
void APIENTRY gl_dispatch_stub_788(GLuint index, GLfloat x, GLfloat y, GLfloat z);
void APIENTRY gl_dispatch_stub_789(GLuint index, const GLfloat *v);
void APIENTRY gl_dispatch_stub_790(GLuint index, GLshort x, GLshort y, GLshort z);
void APIENTRY gl_dispatch_stub_791(GLuint index, const GLshort *v);
void APIENTRY gl_dispatch_stub_792(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
void APIENTRY gl_dispatch_stub_793(GLuint index, const GLdouble *v);
void APIENTRY gl_dispatch_stub_794(GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
void APIENTRY gl_dispatch_stub_795(GLuint index, const GLfloat *v);
void APIENTRY gl_dispatch_stub_796(GLuint index, GLshort x, GLshort y, GLshort z, GLshort w);
void APIENTRY gl_dispatch_stub_797(GLuint index, const GLshort *v);
void APIENTRY gl_dispatch_stub_798(GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w);
void APIENTRY gl_dispatch_stub_799(GLuint index, const GLubyte *v);
void APIENTRY gl_dispatch_stub_800(GLuint index, GLint size, GLenum type, GLsizei stride, const GLvoid *pointer);
void APIENTRY gl_dispatch_stub_801(GLuint index, GLsizei n, const GLdouble *v);
void APIENTRY gl_dispatch_stub_802(GLuint index, GLsizei n, const GLfloat *v);
void APIENTRY gl_dispatch_stub_803(GLuint index, GLsizei n, const GLshort *v);
void APIENTRY gl_dispatch_stub_804(GLuint index, GLsizei n, const GLdouble *v);
void APIENTRY gl_dispatch_stub_805(GLuint index, GLsizei n, const GLfloat *v);
void APIENTRY gl_dispatch_stub_806(GLuint index, GLsizei n, const GLshort *v);
void APIENTRY gl_dispatch_stub_807(GLuint index, GLsizei n, const GLdouble *v);
void APIENTRY gl_dispatch_stub_808(GLuint index, GLsizei n, const GLfloat *v);
void APIENTRY gl_dispatch_stub_809(GLuint index, GLsizei n, const GLshort *v);
void APIENTRY gl_dispatch_stub_810(GLuint index, GLsizei n, const GLdouble *v);
void APIENTRY gl_dispatch_stub_811(GLuint index, GLsizei n, const GLfloat *v);
void APIENTRY gl_dispatch_stub_812(GLuint index, GLsizei n, const GLshort *v);
void APIENTRY gl_dispatch_stub_813(GLuint index, GLsizei n, const GLubyte *v);
void APIENTRY gl_dispatch_stub_814(GLenum pname, GLfloat *param);
void APIENTRY gl_dispatch_stub_815(GLenum pname, GLint *param);
void APIENTRY gl_dispatch_stub_816(GLenum pname, const GLfloat *param);
void APIENTRY gl_dispatch_stub_817(GLenum pname, const GLint *param);
void APIENTRY gl_dispatch_stub_818(GLenum op, GLuint dst, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod);
void APIENTRY gl_dispatch_stub_819(GLenum op, GLuint dst, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod);
void APIENTRY gl_dispatch_stub_820(GLenum op, GLuint dst, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod, GLuint arg3, GLuint arg3Rep, GLuint arg3Mod);
void APIENTRY gl_dispatch_stub_821(void);
void APIENTRY gl_dispatch_stub_822(GLuint id);
void APIENTRY gl_dispatch_stub_823(GLenum op, GLuint dst, GLuint dstMask, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod);
void APIENTRY gl_dispatch_stub_824(GLenum op, GLuint dst, GLuint dstMask, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod);
void APIENTRY gl_dispatch_stub_825(GLenum op, GLuint dst, GLuint dstMask, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod, GLuint arg3, GLuint arg3Rep, GLuint arg3Mod);
void APIENTRY gl_dispatch_stub_826(GLuint id);
void APIENTRY gl_dispatch_stub_827(void);
GLuint APIENTRY gl_dispatch_stub_828(GLuint range);
void APIENTRY gl_dispatch_stub_829(GLuint dst, GLuint coord, GLenum swizzle);
void APIENTRY gl_dispatch_stub_830(GLuint dst, GLuint interp, GLenum swizzle);
void APIENTRY gl_dispatch_stub_831(GLuint dst, const GLfloat *value);
void APIENTRY gl_dispatch_stub_832(GLenum pname, GLint param);
void APIENTRY gl_dispatch_stub_833(GLenum pname, const GLint *params);
void APIENTRY gl_dispatch_stub_834(GLenum face);
void APIENTRY gl_dispatch_stub_835(GLuint array);
void APIENTRY gl_dispatch_stub_836(GLsizei n, const GLuint *arrays);
void APIENTRY gl_dispatch_stub_837(GLsizei n, GLuint *arrays);
GLboolean APIENTRY gl_dispatch_stub_838(GLuint array);
void APIENTRY gl_dispatch_stub_839(GLuint id, GLsizei len, const GLubyte *name, GLdouble *params);
void APIENTRY gl_dispatch_stub_840(GLuint id, GLsizei len, const GLubyte *name, GLfloat *params);
void APIENTRY gl_dispatch_stub_841(GLuint id, GLsizei len, const GLubyte *name, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
void APIENTRY gl_dispatch_stub_842(GLuint id, GLsizei len, const GLubyte *name, const GLdouble *v);
void APIENTRY gl_dispatch_stub_843(GLuint id, GLsizei len, const GLubyte *name, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
void APIENTRY gl_dispatch_stub_844(GLuint id, GLsizei len, const GLubyte *name, const GLfloat *v);
void APIENTRY gl_dispatch_stub_845(GLuint index);
void APIENTRY gl_dispatch_stub_846(void);
GLAPI void APIENTRY glAlphaFuncxOES(GLenum func, GLclampx ref);
GLAPI void APIENTRY glAlphaFuncx(GLenum func, GLclampx ref);
GLAPI void APIENTRY glClearColorxOES(GLclampx red, GLclampx green, GLclampx blue, GLclampx alpha);
GLAPI void APIENTRY glClearColorx(GLclampx red, GLclampx green, GLclampx blue, GLclampx alpha);
GLAPI void APIENTRY glClearDepthxOES(GLclampx depth);
GLAPI void APIENTRY glClearDepthx(GLclampx depth);
GLAPI void APIENTRY glClipPlanexOES(GLenum plane, const GLfixed *equation);
GLAPI void APIENTRY glClipPlanex(GLenum plane, const GLfixed *equation);
GLAPI void APIENTRY glColor4xOES(GLfixed red, GLfixed green, GLfixed blue, GLfixed alpha);
GLAPI void APIENTRY glColor4x(GLfixed red, GLfixed green, GLfixed blue, GLfixed alpha);
GLAPI void APIENTRY glDepthRangexOES(GLclampx zNear, GLclampx zFar);
GLAPI void APIENTRY glDepthRangex(GLclampx zNear, GLclampx zFar);
GLAPI void APIENTRY glFogxOES(GLenum pname, GLfixed param);
GLAPI void APIENTRY glFogx(GLenum pname, GLfixed param);
GLAPI void APIENTRY glFogxvOES(GLenum pname, const GLfixed *params);
GLAPI void APIENTRY glFogxv(GLenum pname, const GLfixed *params);
GLAPI void APIENTRY glFrustumxOES(GLfixed left, GLfixed right, GLfixed bottom, GLfixed top, GLfixed zNear, GLfixed zFar);
GLAPI void APIENTRY glFrustumx(GLfixed left, GLfixed right, GLfixed bottom, GLfixed top, GLfixed zNear, GLfixed zFar);
GLAPI void APIENTRY glGetClipPlanexOES(GLenum plane, GLfixed *equation);
GLAPI void APIENTRY glGetClipPlanex(GLenum plane, GLfixed *equation);
GLAPI void APIENTRY glGetFixedvOES(GLenum pname, GLfixed *params);
GLAPI void APIENTRY glGetFixedv(GLenum pname, GLfixed *params);
GLAPI void APIENTRY glGetLightxvOES(GLenum light, GLenum pname, GLfixed *params);
GLAPI void APIENTRY glGetLightxv(GLenum light, GLenum pname, GLfixed *params);
GLAPI void APIENTRY glGetMaterialxvOES(GLenum face, GLenum pname, GLfixed *params);
GLAPI void APIENTRY glGetMaterialxv(GLenum face, GLenum pname, GLfixed *params);
GLAPI void APIENTRY glGetTexEnvxvOES(GLenum target, GLenum pname, GLfixed *params);
GLAPI void APIENTRY glGetTexEnvxv(GLenum target, GLenum pname, GLfixed *params);
GLAPI void APIENTRY glGetTexGenxvOES(GLenum coord, GLenum pname, GLfixed *params);
GLAPI void APIENTRY glGetTexParameterxvOES(GLenum target, GLenum pname, GLfixed *params);
GLAPI void APIENTRY glGetTexParameterxv(GLenum target, GLenum pname, GLfixed *params);
GLAPI void APIENTRY glLightModelxOES(GLenum pname, GLfixed param);
GLAPI void APIENTRY glLightModelx(GLenum pname, GLfixed param);
GLAPI void APIENTRY glLightModelxvOES(GLenum pname, const GLfixed *params);
GLAPI void APIENTRY glLightModelxv(GLenum pname, const GLfixed *params);
GLAPI void APIENTRY glLightxOES(GLenum light, GLenum pname, GLfixed param);
GLAPI void APIENTRY glLightx(GLenum light, GLenum pname, GLfixed param);
GLAPI void APIENTRY glLightxvOES(GLenum light, GLenum pname, const GLfixed *params);
GLAPI void APIENTRY glLightxv(GLenum light, GLenum pname, const GLfixed *params);
GLAPI void APIENTRY glLineWidthxOES(GLfixed width);
GLAPI void APIENTRY glLineWidthx(GLfixed width);
GLAPI void APIENTRY glLoadMatrixxOES(const GLfixed *m);
GLAPI void APIENTRY glLoadMatrixx(const GLfixed *m);
GLAPI void APIENTRY glMaterialxOES(GLenum face, GLenum pname, GLfixed param);
GLAPI void APIENTRY glMaterialx(GLenum face, GLenum pname, GLfixed param);
GLAPI void APIENTRY glMaterialxvOES(GLenum face, GLenum pname, const GLfixed *params);
GLAPI void APIENTRY glMaterialxv(GLenum face, GLenum pname, const GLfixed *params);
GLAPI void APIENTRY glMultMatrixxOES(const GLfixed *m);
GLAPI void APIENTRY glMultMatrixx(const GLfixed *m);
GLAPI void APIENTRY glMultiTexCoord4xOES(GLenum target, GLfixed s, GLfixed t, GLfixed r, GLfixed q);
GLAPI void APIENTRY glMultiTexCoord4x(GLenum target, GLfixed s, GLfixed t, GLfixed r, GLfixed q);
GLAPI void APIENTRY glNormal3xOES(GLfixed nx, GLfixed ny, GLfixed nz);
GLAPI void APIENTRY glNormal3x(GLfixed nx, GLfixed ny, GLfixed nz);
GLAPI void APIENTRY glOrthoxOES(GLfixed left, GLfixed right, GLfixed bottom, GLfixed top, GLfixed zNear, GLfixed zFar);
GLAPI void APIENTRY glOrthox(GLfixed left, GLfixed right, GLfixed bottom, GLfixed top, GLfixed zNear, GLfixed zFar);
GLAPI void APIENTRY glPointParameterxOES(GLenum pname, GLfixed param);
GLAPI void APIENTRY glPointParameterx(GLenum pname, GLfixed param);
GLAPI void APIENTRY glPointParameterxvOES(GLenum pname, const GLfixed *params);
GLAPI void APIENTRY glPointParameterxv(GLenum pname, const GLfixed *params);
GLAPI void APIENTRY glPointSizexOES(GLfixed size);
GLAPI void APIENTRY glPointSizex(GLfixed size);
GLAPI void APIENTRY glPolygonOffsetxOES(GLfixed factor, GLfixed units);
GLAPI void APIENTRY glPolygonOffsetx(GLfixed factor, GLfixed units);
GLAPI void APIENTRY glRotatexOES(GLfixed angle, GLfixed x, GLfixed y, GLfixed z);
GLAPI void APIENTRY glRotatex(GLfixed angle, GLfixed x, GLfixed y, GLfixed z);
GLAPI void APIENTRY glSampleCoveragexOES(GLclampx value, GLboolean invert);
GLAPI void APIENTRY glSampleCoveragex(GLclampx value, GLboolean invert);
GLAPI void APIENTRY glScalexOES(GLfixed x, GLfixed y, GLfixed z);
GLAPI void APIENTRY glScalex(GLfixed x, GLfixed y, GLfixed z);
GLAPI void APIENTRY glTexEnvxOES(GLenum target, GLenum pname, GLfixed param);
GLAPI void APIENTRY glTexEnvx(GLenum target, GLenum pname, GLfixed param);
GLAPI void APIENTRY glTexEnvxvOES(GLenum target, GLenum pname, const GLfixed *params);
GLAPI void APIENTRY glTexEnvxv(GLenum target, GLenum pname, const GLfixed *params);
GLAPI void APIENTRY glTexGenxOES(GLenum coord, GLenum pname, GLint param);
GLAPI void APIENTRY glTexGenxvOES(GLenum coord, GLenum pname, const GLfixed *params);
GLAPI void APIENTRY glTexParameterxOES(GLenum target, GLenum pname, GLfixed param);
GLAPI void APIENTRY glTexParameterx(GLenum target, GLenum pname, GLfixed param);
GLAPI void APIENTRY glTexParameterxvOES(GLenum target, GLenum pname, const GLfixed *params);
GLAPI void APIENTRY glTexParameterxv(GLenum target, GLenum pname, const GLfixed *params);
GLAPI void APIENTRY glTranslatexOES(GLfixed x, GLfixed y, GLfixed z);
GLAPI void APIENTRY glTranslatex(GLfixed x, GLfixed y, GLfixed z);
GLAPI void APIENTRY glClipPlanefOES(GLenum plane, const GLfloat *equation);
GLAPI void APIENTRY glClipPlanef(GLenum plane, const GLfloat *equation);
GLAPI void APIENTRY glFrustumfOES(GLfloat left, GLfloat right, GLfloat bottom, GLfloat top, GLfloat zNear, GLfloat zFar);
GLAPI void APIENTRY glFrustumf(GLfloat left, GLfloat right, GLfloat bottom, GLfloat top, GLfloat zNear, GLfloat zFar);
GLAPI void APIENTRY glGetClipPlanefOES(GLenum plane, GLfloat *equation);
GLAPI void APIENTRY glGetClipPlanef(GLenum plane, GLfloat *equation);
GLAPI void APIENTRY glOrthofOES(GLfloat left, GLfloat right, GLfloat bottom, GLfloat top, GLfloat zNear, GLfloat zFar);
GLAPI void APIENTRY glOrthof(GLfloat left, GLfloat right, GLfloat bottom, GLfloat top, GLfloat zNear, GLfloat zFar);
void APIENTRY gl_dispatch_stub_893(GLclampd zmin, GLclampd zmax);
void APIENTRY gl_dispatch_stub_894(GLenum modeRGB, GLenum modeA);
GLAPI void APIENTRY glBlendEquationSeparateOES(GLenum modeRGB, GLenum modeA);
void APIENTRY gl_dispatch_stub_895(GLenum target, GLuint framebuffer);
GLAPI void APIENTRY glBindFramebufferOES(GLenum target, GLuint framebuffer);
void APIENTRY gl_dispatch_stub_896(GLenum target, GLuint renderbuffer);
GLAPI void APIENTRY glBindRenderbufferOES(GLenum target, GLuint renderbuffer);
GLenum APIENTRY gl_dispatch_stub_897(GLenum target);
GLAPI GLenum APIENTRY glCheckFramebufferStatusOES(GLenum target);
void APIENTRY gl_dispatch_stub_898(GLsizei n, const GLuint *framebuffers);
GLAPI void APIENTRY glDeleteFramebuffersOES(GLsizei n, const GLuint *framebuffers);
void APIENTRY gl_dispatch_stub_899(GLsizei n, const GLuint *renderbuffers);
GLAPI void APIENTRY glDeleteRenderbuffersOES(GLsizei n, const GLuint *renderbuffers);
void APIENTRY gl_dispatch_stub_900(GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer);
GLAPI void APIENTRY glFramebufferRenderbufferOES(GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer);
void APIENTRY gl_dispatch_stub_901(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level);
void APIENTRY gl_dispatch_stub_902(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level);
GLAPI void APIENTRY glFramebufferTexture2DOES(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level);
void APIENTRY gl_dispatch_stub_903(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset);
void APIENTRY gl_dispatch_stub_904(GLsizei n, GLuint *framebuffers);
GLAPI void APIENTRY glGenFramebuffersOES(GLsizei n, GLuint *framebuffers);
void APIENTRY gl_dispatch_stub_905(GLsizei n, GLuint *renderbuffers);
GLAPI void APIENTRY glGenRenderbuffersOES(GLsizei n, GLuint *renderbuffers);
void APIENTRY gl_dispatch_stub_906(GLenum target);
GLAPI void APIENTRY glGenerateMipmapOES(GLenum target);
void APIENTRY gl_dispatch_stub_907(GLenum target, GLenum attachment, GLenum pname, GLint *params);
GLAPI void APIENTRY glGetFramebufferAttachmentParameterivOES(GLenum target, GLenum attachment, GLenum pname, GLint *params);
void APIENTRY gl_dispatch_stub_908(GLenum target, GLenum pname, GLint *params);
GLAPI void APIENTRY glGetRenderbufferParameterivOES(GLenum target, GLenum pname, GLint *params);
GLboolean APIENTRY gl_dispatch_stub_909(GLuint framebuffer);
GLAPI GLboolean APIENTRY glIsFramebufferOES(GLuint framebuffer);
GLboolean APIENTRY gl_dispatch_stub_910(GLuint renderbuffer);
GLAPI GLboolean APIENTRY glIsRenderbufferOES(GLuint renderbuffer);
void APIENTRY gl_dispatch_stub_911(GLenum target, GLenum internalformat, GLsizei width, GLsizei height);
GLAPI void APIENTRY glRenderbufferStorageOES(GLenum target, GLenum internalformat, GLsizei width, GLsizei height);
void APIENTRY gl_dispatch_stub_912(GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter);
void APIENTRY gl_dispatch_stub_913(GLenum target, GLenum pname, GLint param);
void APIENTRY gl_dispatch_stub_914(GLenum target, GLintptr offset, GLsizeiptr size);
void APIENTRY gl_dispatch_stub_915(GLuint program, GLuint colorNumber, const GLchar *name);
GLint APIENTRY gl_dispatch_stub_916(GLuint program, const GLchar *name);
void APIENTRY gl_dispatch_stub_917(GLuint program, GLint location, GLuint *params);
void APIENTRY gl_dispatch_stub_918(GLuint index, GLenum pname, GLint *params);
void APIENTRY gl_dispatch_stub_919(GLuint index, GLenum pname, GLuint *params);
void APIENTRY gl_dispatch_stub_920(GLint location, GLuint x);
void APIENTRY gl_dispatch_stub_921(GLint location, GLsizei count, const GLuint *value);
void APIENTRY gl_dispatch_stub_922(GLint location, GLuint x, GLuint y);
void APIENTRY gl_dispatch_stub_923(GLint location, GLsizei count, const GLuint *value);
void APIENTRY gl_dispatch_stub_924(GLint location, GLuint x, GLuint y, GLuint z);
void APIENTRY gl_dispatch_stub_925(GLint location, GLsizei count, const GLuint *value);
void APIENTRY gl_dispatch_stub_926(GLint location, GLuint x, GLuint y, GLuint z, GLuint w);
void APIENTRY gl_dispatch_stub_927(GLint location, GLsizei count, const GLuint *value);
void APIENTRY gl_dispatch_stub_928(GLuint index, GLint x);
void APIENTRY gl_dispatch_stub_929(GLuint index, const GLint *v);
void APIENTRY gl_dispatch_stub_930(GLuint index, GLuint x);
void APIENTRY gl_dispatch_stub_931(GLuint index, const GLuint *v);
void APIENTRY gl_dispatch_stub_932(GLuint index, GLint x, GLint y);
void APIENTRY gl_dispatch_stub_933(GLuint index, const GLint *v);
void APIENTRY gl_dispatch_stub_934(GLuint index, GLuint x, GLuint y);
void APIENTRY gl_dispatch_stub_935(GLuint index, const GLuint *v);
void APIENTRY gl_dispatch_stub_936(GLuint index, GLint x, GLint y, GLint z);
void APIENTRY gl_dispatch_stub_937(GLuint index, const GLint *v);
void APIENTRY gl_dispatch_stub_938(GLuint index, GLuint x, GLuint y, GLuint z);
void APIENTRY gl_dispatch_stub_939(GLuint index, const GLuint *v);
void APIENTRY gl_dispatch_stub_940(GLuint index, const GLbyte *v);
void APIENTRY gl_dispatch_stub_941(GLuint index, GLint x, GLint y, GLint z, GLint w);
void APIENTRY gl_dispatch_stub_942(GLuint index, const GLint *v);
void APIENTRY gl_dispatch_stub_943(GLuint index, const GLshort *v);
void APIENTRY gl_dispatch_stub_944(GLuint index, const GLubyte *v);
void APIENTRY gl_dispatch_stub_945(GLuint index, GLuint x, GLuint y, GLuint z, GLuint w);
void APIENTRY gl_dispatch_stub_946(GLuint index, const GLuint *v);
void APIENTRY gl_dispatch_stub_947(GLuint index, const GLushort *v);
void APIENTRY gl_dispatch_stub_948(GLuint index, GLint size, GLenum type, GLsizei stride, const GLvoid *pointer);
void APIENTRY gl_dispatch_stub_949(GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer);
void APIENTRY gl_dispatch_stub_950(GLuint buf, GLboolean r, GLboolean g, GLboolean b, GLboolean a);
void APIENTRY gl_dispatch_stub_951(GLenum target, GLuint index);
void APIENTRY gl_dispatch_stub_952(GLenum target, GLuint index);
void APIENTRY gl_dispatch_stub_953(GLenum value, GLuint index, GLboolean *data);
void APIENTRY gl_dispatch_stub_954(GLenum value, GLuint index, GLint *data);
GLboolean APIENTRY gl_dispatch_stub_955(GLenum target, GLuint index);
void APIENTRY gl_dispatch_stub_956(GLint r, GLint g, GLint b, GLint a);
void APIENTRY gl_dispatch_stub_957(GLuint r, GLuint g, GLuint b, GLuint a);
void APIENTRY gl_dispatch_stub_958(GLenum target, GLenum pname, GLint *params);
void APIENTRY gl_dispatch_stub_959(GLenum target, GLenum pname, GLuint *params);
void APIENTRY gl_dispatch_stub_960(GLenum target, GLenum pname, const GLint *params);
void APIENTRY gl_dispatch_stub_961(GLenum target, GLenum pname, const GLuint *params);
void APIENTRY gl_dispatch_stub_962(GLuint query, GLenum mode);
void APIENTRY gl_dispatch_stub_963(void);
void APIENTRY gl_dispatch_stub_964(GLenum mode);
void APIENTRY gl_dispatch_stub_965(GLenum target, GLuint index, GLuint buffer);
void APIENTRY gl_dispatch_stub_966(GLenum target, GLuint index, GLuint buffer, GLintptr offset);
void APIENTRY gl_dispatch_stub_967(GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size);
void APIENTRY gl_dispatch_stub_968(void);
void APIENTRY gl_dispatch_stub_969(GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLsizei *size, GLenum *type, GLchar *name);
void APIENTRY gl_dispatch_stub_970(GLuint program, GLsizei count, const char **varyings, GLenum bufferMode);
void APIENTRY gl_dispatch_stub_971(GLenum mode);
void APIENTRY gl_dispatch_stub_972(GLenum target, GLenum pname, GLvoid **params);
void APIENTRY gl_dispatch_stub_973(GLenum target, GLsizei length, GLvoid *pointer);
void APIENTRY gl_dispatch_stub_974(GLenum objectType, GLuint name, GLenum pname, GLint *value);
GLenum APIENTRY gl_dispatch_stub_975(GLenum objectType, GLuint name, GLenum option);
GLenum APIENTRY gl_dispatch_stub_976(GLenum objectType, GLuint name, GLenum option);
void APIENTRY gl_dispatch_stub_977(GLuint program);
GLuint APIENTRY gl_dispatch_stub_978(GLenum type, const GLchar *string);
void APIENTRY gl_dispatch_stub_979(GLenum type, GLuint program);
void APIENTRY gl_dispatch_stub_980(void);
void APIENTRY gl_dispatch_stub_981(GLenum frontfunc, GLenum backfunc, GLint ref, GLuint mask);
void APIENTRY gl_dispatch_stub_982(GLenum target, GLuint index, GLsizei count, const GLfloat *params);
void APIENTRY gl_dispatch_stub_983(GLenum target, GLuint index, GLsizei count, const GLfloat *params);
void APIENTRY gl_dispatch_stub_984(GLuint id, GLenum pname, GLint64EXT *params);
void APIENTRY gl_dispatch_stub_985(GLuint id, GLenum pname, GLuint64EXT *params);
GLAPI void APIENTRY glEGLImageTargetRenderbufferStorageOES(GLenum target, GLvoid *writeOffset);
GLAPI void APIENTRY glEGLImageTargetTexture2DOES(GLenum target, GLvoid *writeOffset);
#undef MAPI_TMP_DEFINES
#endif /* MAPI_TMP_DEFINES */

#ifdef MAPI_TMP_PUBLIC_ENTRIES_NO_HIDDEN
GLAPI void APIENTRY glColor4f(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[29];
   ((void (APIENTRY *)(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha)) _func)(red, green, blue, alpha);
}

GLAPI void APIENTRY glColor4ub(GLubyte red, GLubyte green, GLubyte blue, GLubyte alpha)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[35];
   ((void (APIENTRY *)(GLubyte red, GLubyte green, GLubyte blue, GLubyte alpha)) _func)(red, green, blue, alpha);
}

GLAPI void APIENTRY glNormal3f(GLfloat nx, GLfloat ny, GLfloat nz)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[56];
   ((void (APIENTRY *)(GLfloat nx, GLfloat ny, GLfloat nz)) _func)(nx, ny, nz);
}

GLAPI void APIENTRY glCullFace(GLenum mode)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[152];
   ((void (APIENTRY *)(GLenum mode)) _func)(mode);
}

GLAPI void APIENTRY glFogf(GLenum pname, GLfloat param)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[153];
   ((void (APIENTRY *)(GLenum pname, GLfloat param)) _func)(pname, param);
}

GLAPI void APIENTRY glFogfv(GLenum pname, const GLfloat *params)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[154];
   ((void (APIENTRY *)(GLenum pname, const GLfloat *params)) _func)(pname, params);
}

GLAPI void APIENTRY glFrontFace(GLenum mode)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[157];
   ((void (APIENTRY *)(GLenum mode)) _func)(mode);
}

GLAPI void APIENTRY glHint(GLenum target, GLenum mode)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[158];
   ((void (APIENTRY *)(GLenum target, GLenum mode)) _func)(target, mode);
}

GLAPI void APIENTRY glLightf(GLenum light, GLenum pname, GLfloat param)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[159];
   ((void (APIENTRY *)(GLenum light, GLenum pname, GLfloat param)) _func)(light, pname, param);
}

GLAPI void APIENTRY glLightfv(GLenum light, GLenum pname, const GLfloat *params)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[160];
   ((void (APIENTRY *)(GLenum light, GLenum pname, const GLfloat *params)) _func)(light, pname, params);
}

GLAPI void APIENTRY glLightModelf(GLenum pname, GLfloat param)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[163];
   ((void (APIENTRY *)(GLenum pname, GLfloat param)) _func)(pname, param);
}

GLAPI void APIENTRY glLightModelfv(GLenum pname, const GLfloat *params)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[164];
   ((void (APIENTRY *)(GLenum pname, const GLfloat *params)) _func)(pname, params);
}

GLAPI void APIENTRY glLineWidth(GLfloat width)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[168];
   ((void (APIENTRY *)(GLfloat width)) _func)(width);
}

GLAPI void APIENTRY glMaterialf(GLenum face, GLenum pname, GLfloat param)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[169];
   ((void (APIENTRY *)(GLenum face, GLenum pname, GLfloat param)) _func)(face, pname, param);
}

GLAPI void APIENTRY glMaterialfv(GLenum face, GLenum pname, const GLfloat *params)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[170];
   ((void (APIENTRY *)(GLenum face, GLenum pname, const GLfloat *params)) _func)(face, pname, params);
}

GLAPI void APIENTRY glPointSize(GLfloat size)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[173];
   ((void (APIENTRY *)(GLfloat size)) _func)(size);
}

GLAPI void APIENTRY glScissor(GLint x, GLint y, GLsizei width, GLsizei height)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[176];
   ((void (APIENTRY *)(GLint x, GLint y, GLsizei width, GLsizei height)) _func)(x, y, width, height);
}

GLAPI void APIENTRY glShadeModel(GLenum mode)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[177];
   ((void (APIENTRY *)(GLenum mode)) _func)(mode);
}

GLAPI void APIENTRY glTexParameterf(GLenum target, GLenum pname, GLfloat param)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[178];
   ((void (APIENTRY *)(GLenum target, GLenum pname, GLfloat param)) _func)(target, pname, param);
}

GLAPI void APIENTRY glTexParameterfv(GLenum target, GLenum pname, const GLfloat *params)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[179];
   ((void (APIENTRY *)(GLenum target, GLenum pname, const GLfloat *params)) _func)(target, pname, params);
}

GLAPI void APIENTRY glTexParameteri(GLenum target, GLenum pname, GLint param)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[180];
   ((void (APIENTRY *)(GLenum target, GLenum pname, GLint param)) _func)(target, pname, param);
}

GLAPI void APIENTRY glTexParameteriv(GLenum target, GLenum pname, const GLint *params)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[181];
   ((void (APIENTRY *)(GLenum target, GLenum pname, const GLint *params)) _func)(target, pname, params);
}

GLAPI void APIENTRY glTexImage2D(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const GLvoid *pixels)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[183];
   ((void (APIENTRY *)(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const GLvoid *pixels)) _func)(target, level, internalformat, width, height, border, format, type, pixels);
}

GLAPI void APIENTRY glTexEnvf(GLenum target, GLenum pname, GLfloat param)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[184];
   ((void (APIENTRY *)(GLenum target, GLenum pname, GLfloat param)) _func)(target, pname, param);
}

GLAPI void APIENTRY glTexEnvfv(GLenum target, GLenum pname, const GLfloat *params)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[185];
   ((void (APIENTRY *)(GLenum target, GLenum pname, const GLfloat *params)) _func)(target, pname, params);
}

GLAPI void APIENTRY glTexEnvi(GLenum target, GLenum pname, GLint param)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[186];
   ((void (APIENTRY *)(GLenum target, GLenum pname, GLint param)) _func)(target, pname, param);
}

GLAPI void APIENTRY glTexEnviv(GLenum target, GLenum pname, const GLint *params)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[187];
   ((void (APIENTRY *)(GLenum target, GLenum pname, const GLint *params)) _func)(target, pname, params);
}

GLAPI void APIENTRY glTexGenfOES(GLenum coord, GLenum pname, GLfloat param)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[190];
   ((void (APIENTRY *)(GLenum coord, GLenum pname, GLfloat param)) _func)(coord, pname, param);
}

GLAPI void APIENTRY glTexGenfvOES(GLenum coord, GLenum pname, const GLfloat *params)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[191];
   ((void (APIENTRY *)(GLenum coord, GLenum pname, const GLfloat *params)) _func)(coord, pname, params);
}

GLAPI void APIENTRY glTexGeniOES(GLenum coord, GLenum pname, GLint param)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[192];
   ((void (APIENTRY *)(GLenum coord, GLenum pname, GLint param)) _func)(coord, pname, param);
}

GLAPI void APIENTRY glTexGenivOES(GLenum coord, GLenum pname, const GLint *params)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[193];
   ((void (APIENTRY *)(GLenum coord, GLenum pname, const GLint *params)) _func)(coord, pname, params);
}

GLAPI void APIENTRY glClear(GLbitfield mask)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[203];
   ((void (APIENTRY *)(GLbitfield mask)) _func)(mask);
}

GLAPI void APIENTRY glClearColor(GLclampf red, GLclampf green, GLclampf blue, GLclampf alpha)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[206];
   ((void (APIENTRY *)(GLclampf red, GLclampf green, GLclampf blue, GLclampf alpha)) _func)(red, green, blue, alpha);
}

GLAPI void APIENTRY glClearStencil(GLint s)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[207];
   ((void (APIENTRY *)(GLint s)) _func)(s);
}

GLAPI void APIENTRY glStencilMask(GLuint mask)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[209];
   ((void (APIENTRY *)(GLuint mask)) _func)(mask);
}

GLAPI void APIENTRY glColorMask(GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[210];
   ((void (APIENTRY *)(GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha)) _func)(red, green, blue, alpha);
}

GLAPI void APIENTRY glDepthMask(GLboolean flag)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[211];
   ((void (APIENTRY *)(GLboolean flag)) _func)(flag);
}

GLAPI void APIENTRY glDisable(GLenum cap)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[214];
   ((void (APIENTRY *)(GLenum cap)) _func)(cap);
}

GLAPI void APIENTRY glEnable(GLenum cap)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[215];
   ((void (APIENTRY *)(GLenum cap)) _func)(cap);
}

GLAPI void APIENTRY glFinish(void)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[216];
   ((void (APIENTRY *)(void)) _func)();
}

GLAPI void APIENTRY glFlush(void)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[217];
   ((void (APIENTRY *)(void)) _func)();
}

GLAPI void APIENTRY glAlphaFunc(GLenum func, GLclampf ref)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[240];
   ((void (APIENTRY *)(GLenum func, GLclampf ref)) _func)(func, ref);
}

GLAPI void APIENTRY glBlendFunc(GLenum sfactor, GLenum dfactor)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[241];
   ((void (APIENTRY *)(GLenum sfactor, GLenum dfactor)) _func)(sfactor, dfactor);
}

GLAPI void APIENTRY glLogicOp(GLenum opcode)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[242];
   ((void (APIENTRY *)(GLenum opcode)) _func)(opcode);
}

GLAPI void APIENTRY glStencilFunc(GLenum func, GLint ref, GLuint mask)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[243];
   ((void (APIENTRY *)(GLenum func, GLint ref, GLuint mask)) _func)(func, ref, mask);
}

GLAPI void APIENTRY glStencilOp(GLenum fail, GLenum zfail, GLenum zpass)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[244];
   ((void (APIENTRY *)(GLenum fail, GLenum zfail, GLenum zpass)) _func)(fail, zfail, zpass);
}

GLAPI void APIENTRY glDepthFunc(GLenum func)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[245];
   ((void (APIENTRY *)(GLenum func)) _func)(func);
}

GLAPI void APIENTRY glPixelStorei(GLenum pname, GLint param)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[250];
   ((void (APIENTRY *)(GLenum pname, GLint param)) _func)(pname, param);
}

GLAPI void APIENTRY glReadPixels(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLvoid *pixels)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[256];
   ((void (APIENTRY *)(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLvoid *pixels)) _func)(x, y, width, height, format, type, pixels);
}

GLAPI void APIENTRY glGetBooleanv(GLenum pname, GLboolean *params)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[258];
   ((void (APIENTRY *)(GLenum pname, GLboolean *params)) _func)(pname, params);
}

GLAPI GLenum APIENTRY glGetError(void)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[261];
   return ((GLenum (APIENTRY *)(void)) _func)();
}

GLAPI void APIENTRY glGetFloatv(GLenum pname, GLfloat *params)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[262];
   ((void (APIENTRY *)(GLenum pname, GLfloat *params)) _func)(pname, params);
}

GLAPI void APIENTRY glGetIntegerv(GLenum pname, GLint *params)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[263];
   ((void (APIENTRY *)(GLenum pname, GLint *params)) _func)(pname, params);
}

GLAPI void APIENTRY glGetLightfv(GLenum light, GLenum pname, GLfloat *params)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[264];
   ((void (APIENTRY *)(GLenum light, GLenum pname, GLfloat *params)) _func)(light, pname, params);
}

GLAPI void APIENTRY glGetMaterialfv(GLenum face, GLenum pname, GLfloat *params)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[269];
   ((void (APIENTRY *)(GLenum face, GLenum pname, GLfloat *params)) _func)(face, pname, params);
}

GLAPI const GLubyte * APIENTRY glGetString(GLenum name)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[275];
   return ((const GLubyte * (APIENTRY *)(GLenum name)) _func)(name);
}

GLAPI void APIENTRY glGetTexEnvfv(GLenum target, GLenum pname, GLfloat *params)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[276];
   ((void (APIENTRY *)(GLenum target, GLenum pname, GLfloat *params)) _func)(target, pname, params);
}

GLAPI void APIENTRY glGetTexEnviv(GLenum target, GLenum pname, GLint *params)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[277];
   ((void (APIENTRY *)(GLenum target, GLenum pname, GLint *params)) _func)(target, pname, params);
}

GLAPI void APIENTRY glGetTexGenfvOES(GLenum coord, GLenum pname, GLfloat *params)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[279];
   ((void (APIENTRY *)(GLenum coord, GLenum pname, GLfloat *params)) _func)(coord, pname, params);
}

GLAPI void APIENTRY glGetTexGenivOES(GLenum coord, GLenum pname, GLint *params)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[280];
   ((void (APIENTRY *)(GLenum coord, GLenum pname, GLint *params)) _func)(coord, pname, params);
}

GLAPI void APIENTRY glGetTexParameterfv(GLenum target, GLenum pname, GLfloat *params)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[282];
   ((void (APIENTRY *)(GLenum target, GLenum pname, GLfloat *params)) _func)(target, pname, params);
}

GLAPI void APIENTRY glGetTexParameteriv(GLenum target, GLenum pname, GLint *params)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[283];
   ((void (APIENTRY *)(GLenum target, GLenum pname, GLint *params)) _func)(target, pname, params);
}

GLAPI GLboolean APIENTRY glIsEnabled(GLenum cap)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[286];
   return ((GLboolean (APIENTRY *)(GLenum cap)) _func)(cap);
}

GLAPI void APIENTRY glLoadIdentity(void)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[290];
   ((void (APIENTRY *)(void)) _func)();
}

GLAPI void APIENTRY glLoadMatrixf(const GLfloat *m)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[291];
   ((void (APIENTRY *)(const GLfloat *m)) _func)(m);
}

GLAPI void APIENTRY glMatrixMode(GLenum mode)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[293];
   ((void (APIENTRY *)(GLenum mode)) _func)(mode);
}

GLAPI void APIENTRY glMultMatrixf(const GLfloat *m)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[294];
   ((void (APIENTRY *)(const GLfloat *m)) _func)(m);
}

GLAPI void APIENTRY glPopMatrix(void)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[297];
   ((void (APIENTRY *)(void)) _func)();
}

GLAPI void APIENTRY glPushMatrix(void)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[298];
   ((void (APIENTRY *)(void)) _func)();
}

GLAPI void APIENTRY glRotatef(GLfloat angle, GLfloat x, GLfloat y, GLfloat z)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[300];
   ((void (APIENTRY *)(GLfloat angle, GLfloat x, GLfloat y, GLfloat z)) _func)(angle, x, y, z);
}

GLAPI void APIENTRY glScalef(GLfloat x, GLfloat y, GLfloat z)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[302];
   ((void (APIENTRY *)(GLfloat x, GLfloat y, GLfloat z)) _func)(x, y, z);
}

GLAPI void APIENTRY glTranslatef(GLfloat x, GLfloat y, GLfloat z)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[304];
   ((void (APIENTRY *)(GLfloat x, GLfloat y, GLfloat z)) _func)(x, y, z);
}

GLAPI void APIENTRY glViewport(GLint x, GLint y, GLsizei width, GLsizei height)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[305];
   ((void (APIENTRY *)(GLint x, GLint y, GLsizei width, GLsizei height)) _func)(x, y, width, height);
}

GLAPI void APIENTRY glBindTexture(GLenum target, GLuint texture)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[307];
   ((void (APIENTRY *)(GLenum target, GLuint texture)) _func)(target, texture);
}

GLAPI void APIENTRY glColorPointer(GLint size, GLenum type, GLsizei stride, const GLvoid *pointer)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[308];
   ((void (APIENTRY *)(GLint size, GLenum type, GLsizei stride, const GLvoid *pointer)) _func)(size, type, stride, pointer);
}

GLAPI void APIENTRY glDisableClientState(GLenum array)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[309];
   ((void (APIENTRY *)(GLenum array)) _func)(array);
}

GLAPI void APIENTRY glDrawArrays(GLenum mode, GLint first, GLsizei count)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[310];
   ((void (APIENTRY *)(GLenum mode, GLint first, GLsizei count)) _func)(mode, first, count);
}

GLAPI void APIENTRY glDrawElements(GLenum mode, GLsizei count, GLenum type, const GLvoid *indices)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[311];
   ((void (APIENTRY *)(GLenum mode, GLsizei count, GLenum type, const GLvoid *indices)) _func)(mode, count, type, indices);
}

GLAPI void APIENTRY glEnableClientState(GLenum array)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[313];
   ((void (APIENTRY *)(GLenum array)) _func)(array);
}

GLAPI void APIENTRY glNormalPointer(GLenum type, GLsizei stride, const GLvoid *pointer)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[318];
   ((void (APIENTRY *)(GLenum type, GLsizei stride, const GLvoid *pointer)) _func)(type, stride, pointer);
}

GLAPI void APIENTRY glPolygonOffset(GLfloat factor, GLfloat units)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[319];
   ((void (APIENTRY *)(GLfloat factor, GLfloat units)) _func)(factor, units);
}

GLAPI void APIENTRY glTexCoordPointer(GLint size, GLenum type, GLsizei stride, const GLvoid *pointer)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[320];
   ((void (APIENTRY *)(GLint size, GLenum type, GLsizei stride, const GLvoid *pointer)) _func)(size, type, stride, pointer);
}

GLAPI void APIENTRY glVertexPointer(GLint size, GLenum type, GLsizei stride, const GLvoid *pointer)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[321];
   ((void (APIENTRY *)(GLint size, GLenum type, GLsizei stride, const GLvoid *pointer)) _func)(size, type, stride, pointer);
}

GLAPI void APIENTRY glCopyTexImage2D(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[324];
   ((void (APIENTRY *)(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border)) _func)(target, level, internalformat, x, y, width, height, border);
}

GLAPI void APIENTRY glCopyTexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[326];
   ((void (APIENTRY *)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height)) _func)(target, level, xoffset, yoffset, x, y, width, height);
}

GLAPI void APIENTRY glDeleteTextures(GLsizei n, const GLuint *textures)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[327];
   ((void (APIENTRY *)(GLsizei n, const GLuint *textures)) _func)(n, textures);
}

GLAPI void APIENTRY glGenTextures(GLsizei n, GLuint *textures)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[328];
   ((void (APIENTRY *)(GLsizei n, GLuint *textures)) _func)(n, textures);
}

GLAPI void APIENTRY glGetPointerv(GLenum pname, GLvoid **params)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[329];
   ((void (APIENTRY *)(GLenum pname, GLvoid **params)) _func)(pname, params);
}

GLAPI GLboolean APIENTRY glIsTexture(GLuint texture)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[330];
   return ((GLboolean (APIENTRY *)(GLuint texture)) _func)(texture);
}

GLAPI void APIENTRY glTexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *pixels)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[333];
   ((void (APIENTRY *)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *pixels)) _func)(target, level, xoffset, yoffset, width, height, format, type, pixels);
}

GLAPI void APIENTRY glBlendEquationOES(GLenum mode)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[337];
   ((void (APIENTRY *)(GLenum mode)) _func)(mode);
}

GLAPI void APIENTRY glActiveTexture(GLenum texture)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[374];
   ((void (APIENTRY *)(GLenum texture)) _func)(texture);
}

GLAPI void APIENTRY glClientActiveTexture(GLenum texture)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[375];
   ((void (APIENTRY *)(GLenum texture)) _func)(texture);
}

GLAPI void APIENTRY glMultiTexCoord4f(GLenum target, GLfloat s, GLfloat t, GLfloat r, GLfloat q)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[402];
   ((void (APIENTRY *)(GLenum target, GLfloat s, GLfloat t, GLfloat r, GLfloat q)) _func)(target, s, t, r, q);
}

GLAPI void APIENTRY glSampleCoverage(GLclampf value, GLboolean invert)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[445];
   ((void (APIENTRY *)(GLclampf value, GLboolean invert)) _func)(value, invert);
}

GLAPI void APIENTRY glCompressedTexImage2D(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const GLvoid *data)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[447];
   ((void (APIENTRY *)(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const GLvoid *data)) _func)(target, level, internalformat, width, height, border, imageSize, data);
}

GLAPI void APIENTRY glCompressedTexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const GLvoid *data)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[450];
   ((void (APIENTRY *)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const GLvoid *data)) _func)(target, level, xoffset, yoffset, width, height, format, imageSize, data);
}

GLAPI void APIENTRY glBindBuffer(GLenum target, GLuint buffer)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[510];
   ((void (APIENTRY *)(GLenum target, GLuint buffer)) _func)(target, buffer);
}

GLAPI void APIENTRY glBufferData(GLenum target, GLsizeiptr size, const GLvoid *data, GLenum usage)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[511];
   ((void (APIENTRY *)(GLenum target, GLsizeiptr size, const GLvoid *data, GLenum usage)) _func)(target, size, data, usage);
}

GLAPI void APIENTRY glBufferSubData(GLenum target, GLintptr offset, GLsizeiptr size, const GLvoid *data)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[512];
   ((void (APIENTRY *)(GLenum target, GLintptr offset, GLsizeiptr size, const GLvoid *data)) _func)(target, offset, size, data);
}

GLAPI void APIENTRY glDeleteBuffers(GLsizei n, const GLuint *buffer)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[513];
   ((void (APIENTRY *)(GLsizei n, const GLuint *buffer)) _func)(n, buffer);
}

GLAPI void APIENTRY glGenBuffers(GLsizei n, GLuint *buffer)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[514];
   ((void (APIENTRY *)(GLsizei n, GLuint *buffer)) _func)(n, buffer);
}

GLAPI void APIENTRY glGetBufferParameteriv(GLenum target, GLenum pname, GLint *params)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[515];
   ((void (APIENTRY *)(GLenum target, GLenum pname, GLint *params)) _func)(target, pname, params);
}

GLAPI void APIENTRY glGetBufferPointervOES(GLenum target, GLenum pname, GLvoid **params)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[516];
   ((void (APIENTRY *)(GLenum target, GLenum pname, GLvoid **params)) _func)(target, pname, params);
}

GLAPI GLboolean APIENTRY glIsBuffer(GLuint buffer)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[518];
   return ((GLboolean (APIENTRY *)(GLuint buffer)) _func)(buffer);
}

GLAPI GLvoid * APIENTRY glMapBufferOES(GLenum target, GLenum access)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[519];
   return ((GLvoid * (APIENTRY *)(GLenum target, GLenum access)) _func)(target, access);
}

GLAPI GLboolean APIENTRY glUnmapBufferOES(GLenum target)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[520];
   return ((GLboolean (APIENTRY *)(GLenum target)) _func)(target);
}

GLAPI void APIENTRY glClearDepthf(GLclampf depth)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[622];
   ((void (APIENTRY *)(GLclampf depth)) _func)(depth);
}

GLAPI void APIENTRY glClearDepthfOES(GLclampf depth)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[622];
   ((void (APIENTRY *)(GLclampf depth)) _func)(depth);
}

GLAPI void APIENTRY glDepthRangef(GLclampf zNear, GLclampf zFar)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[623];
   ((void (APIENTRY *)(GLclampf zNear, GLclampf zFar)) _func)(zNear, zFar);
}

GLAPI void APIENTRY glDepthRangefOES(GLclampf zNear, GLclampf zFar)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[623];
   ((void (APIENTRY *)(GLclampf zNear, GLclampf zFar)) _func)(zNear, zFar);
}

GLAPI void APIENTRY glDrawTexfOES(GLfloat x, GLfloat y, GLfloat z, GLfloat width, GLfloat height)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[651];
   ((void (APIENTRY *)(GLfloat x, GLfloat y, GLfloat z, GLfloat width, GLfloat height)) _func)(x, y, z, width, height);
}

GLAPI void APIENTRY glDrawTexfvOES(const GLfloat *coords)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[652];
   ((void (APIENTRY *)(const GLfloat *coords)) _func)(coords);
}

GLAPI void APIENTRY glDrawTexiOES(GLint x, GLint y, GLint z, GLint width, GLint height)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[653];
   ((void (APIENTRY *)(GLint x, GLint y, GLint z, GLint width, GLint height)) _func)(x, y, z, width, height);
}

GLAPI void APIENTRY glDrawTexivOES(const GLint *coords)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[654];
   ((void (APIENTRY *)(const GLint *coords)) _func)(coords);
}

GLAPI void APIENTRY glDrawTexsOES(GLshort x, GLshort y, GLshort z, GLshort width, GLshort height)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[655];
   ((void (APIENTRY *)(GLshort x, GLshort y, GLshort z, GLshort width, GLshort height)) _func)(x, y, z, width, height);
}

GLAPI void APIENTRY glDrawTexsvOES(const GLshort *coords)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[656];
   ((void (APIENTRY *)(const GLshort *coords)) _func)(coords);
}

GLAPI void APIENTRY glDrawTexxOES(GLfixed x, GLfixed y, GLfixed z, GLfixed width, GLfixed height)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[657];
   ((void (APIENTRY *)(GLfixed x, GLfixed y, GLfixed z, GLfixed width, GLfixed height)) _func)(x, y, z, width, height);
}

GLAPI void APIENTRY glDrawTexxvOES(const GLfixed *coords)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[658];
   ((void (APIENTRY *)(const GLfixed *coords)) _func)(coords);
}

GLAPI void APIENTRY glPointSizePointerOES(GLenum type, GLsizei stride, const GLvoid *pointer)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[659];
   ((void (APIENTRY *)(GLenum type, GLsizei stride, const GLvoid *pointer)) _func)(type, stride, pointer);
}

GLAPI GLbitfield APIENTRY glQueryMatrixxOES(GLfixed *mantissa, GLint *exponent)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[666];
   return ((GLbitfield (APIENTRY *)(GLfixed *mantissa, GLint *exponent)) _func)(mantissa, exponent);
}

GLAPI void APIENTRY glPointParameterf(GLenum pname, GLfloat param)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[675];
   ((void (APIENTRY *)(GLenum pname, GLfloat param)) _func)(pname, param);
}

GLAPI void APIENTRY glPointParameterfv(GLenum pname, const GLfloat *params)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[676];
   ((void (APIENTRY *)(GLenum pname, const GLfloat *params)) _func)(pname, params);
}

GLAPI void APIENTRY glMultiDrawArraysEXT(GLenum mode, const GLint *first, const GLsizei *count, GLsizei primcount)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[696];
   ((void (APIENTRY *)(GLenum mode, const GLint *first, const GLsizei *count, GLsizei primcount)) _func)(mode, first, count, primcount);
}

GLAPI void APIENTRY glMultiDrawElementsEXT(GLenum mode, const GLsizei *count, GLenum type, const GLvoid **indices, GLsizei primcount)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[697];
   ((void (APIENTRY *)(GLenum mode, const GLsizei *count, GLenum type, const GLvoid **indices, GLsizei primcount)) _func)(mode, count, type, indices, primcount);
}

GLAPI void APIENTRY glBlendFuncSeparateOES(GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[704];
   ((void (APIENTRY *)(GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha)) _func)(sfactorRGB, dfactorRGB, sfactorAlpha, dfactorAlpha);
}

GLAPI void APIENTRY glAlphaFuncxOES(GLenum func, GLclampx ref)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[847];
   ((void (APIENTRY *)(GLenum func, GLclampx ref)) _func)(func, ref);
}

GLAPI void APIENTRY glAlphaFuncx(GLenum func, GLclampx ref)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[847];
   ((void (APIENTRY *)(GLenum func, GLclampx ref)) _func)(func, ref);
}

GLAPI void APIENTRY glClearColorxOES(GLclampx red, GLclampx green, GLclampx blue, GLclampx alpha)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[848];
   ((void (APIENTRY *)(GLclampx red, GLclampx green, GLclampx blue, GLclampx alpha)) _func)(red, green, blue, alpha);
}

GLAPI void APIENTRY glClearColorx(GLclampx red, GLclampx green, GLclampx blue, GLclampx alpha)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[848];
   ((void (APIENTRY *)(GLclampx red, GLclampx green, GLclampx blue, GLclampx alpha)) _func)(red, green, blue, alpha);
}

GLAPI void APIENTRY glClearDepthxOES(GLclampx depth)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[849];
   ((void (APIENTRY *)(GLclampx depth)) _func)(depth);
}

GLAPI void APIENTRY glClearDepthx(GLclampx depth)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[849];
   ((void (APIENTRY *)(GLclampx depth)) _func)(depth);
}

GLAPI void APIENTRY glClipPlanexOES(GLenum plane, const GLfixed *equation)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[850];
   ((void (APIENTRY *)(GLenum plane, const GLfixed *equation)) _func)(plane, equation);
}

GLAPI void APIENTRY glClipPlanex(GLenum plane, const GLfixed *equation)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[850];
   ((void (APIENTRY *)(GLenum plane, const GLfixed *equation)) _func)(plane, equation);
}

GLAPI void APIENTRY glColor4xOES(GLfixed red, GLfixed green, GLfixed blue, GLfixed alpha)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[851];
   ((void (APIENTRY *)(GLfixed red, GLfixed green, GLfixed blue, GLfixed alpha)) _func)(red, green, blue, alpha);
}

GLAPI void APIENTRY glColor4x(GLfixed red, GLfixed green, GLfixed blue, GLfixed alpha)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[851];
   ((void (APIENTRY *)(GLfixed red, GLfixed green, GLfixed blue, GLfixed alpha)) _func)(red, green, blue, alpha);
}

GLAPI void APIENTRY glDepthRangexOES(GLclampx zNear, GLclampx zFar)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[852];
   ((void (APIENTRY *)(GLclampx zNear, GLclampx zFar)) _func)(zNear, zFar);
}

GLAPI void APIENTRY glDepthRangex(GLclampx zNear, GLclampx zFar)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[852];
   ((void (APIENTRY *)(GLclampx zNear, GLclampx zFar)) _func)(zNear, zFar);
}

GLAPI void APIENTRY glFogxOES(GLenum pname, GLfixed param)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[853];
   ((void (APIENTRY *)(GLenum pname, GLfixed param)) _func)(pname, param);
}

GLAPI void APIENTRY glFogx(GLenum pname, GLfixed param)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[853];
   ((void (APIENTRY *)(GLenum pname, GLfixed param)) _func)(pname, param);
}

GLAPI void APIENTRY glFogxvOES(GLenum pname, const GLfixed *params)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[854];
   ((void (APIENTRY *)(GLenum pname, const GLfixed *params)) _func)(pname, params);
}

GLAPI void APIENTRY glFogxv(GLenum pname, const GLfixed *params)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[854];
   ((void (APIENTRY *)(GLenum pname, const GLfixed *params)) _func)(pname, params);
}

GLAPI void APIENTRY glFrustumxOES(GLfixed left, GLfixed right, GLfixed bottom, GLfixed top, GLfixed zNear, GLfixed zFar)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[855];
   ((void (APIENTRY *)(GLfixed left, GLfixed right, GLfixed bottom, GLfixed top, GLfixed zNear, GLfixed zFar)) _func)(left, right, bottom, top, zNear, zFar);
}

GLAPI void APIENTRY glFrustumx(GLfixed left, GLfixed right, GLfixed bottom, GLfixed top, GLfixed zNear, GLfixed zFar)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[855];
   ((void (APIENTRY *)(GLfixed left, GLfixed right, GLfixed bottom, GLfixed top, GLfixed zNear, GLfixed zFar)) _func)(left, right, bottom, top, zNear, zFar);
}

GLAPI void APIENTRY glGetClipPlanexOES(GLenum plane, GLfixed *equation)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[856];
   ((void (APIENTRY *)(GLenum plane, GLfixed *equation)) _func)(plane, equation);
}

GLAPI void APIENTRY glGetClipPlanex(GLenum plane, GLfixed *equation)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[856];
   ((void (APIENTRY *)(GLenum plane, GLfixed *equation)) _func)(plane, equation);
}

GLAPI void APIENTRY glGetFixedvOES(GLenum pname, GLfixed *params)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[857];
   ((void (APIENTRY *)(GLenum pname, GLfixed *params)) _func)(pname, params);
}

GLAPI void APIENTRY glGetFixedv(GLenum pname, GLfixed *params)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[857];
   ((void (APIENTRY *)(GLenum pname, GLfixed *params)) _func)(pname, params);
}

GLAPI void APIENTRY glGetLightxvOES(GLenum light, GLenum pname, GLfixed *params)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[858];
   ((void (APIENTRY *)(GLenum light, GLenum pname, GLfixed *params)) _func)(light, pname, params);
}

GLAPI void APIENTRY glGetLightxv(GLenum light, GLenum pname, GLfixed *params)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[858];
   ((void (APIENTRY *)(GLenum light, GLenum pname, GLfixed *params)) _func)(light, pname, params);
}

GLAPI void APIENTRY glGetMaterialxvOES(GLenum face, GLenum pname, GLfixed *params)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[859];
   ((void (APIENTRY *)(GLenum face, GLenum pname, GLfixed *params)) _func)(face, pname, params);
}

GLAPI void APIENTRY glGetMaterialxv(GLenum face, GLenum pname, GLfixed *params)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[859];
   ((void (APIENTRY *)(GLenum face, GLenum pname, GLfixed *params)) _func)(face, pname, params);
}

GLAPI void APIENTRY glGetTexEnvxvOES(GLenum target, GLenum pname, GLfixed *params)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[860];
   ((void (APIENTRY *)(GLenum target, GLenum pname, GLfixed *params)) _func)(target, pname, params);
}

GLAPI void APIENTRY glGetTexEnvxv(GLenum target, GLenum pname, GLfixed *params)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[860];
   ((void (APIENTRY *)(GLenum target, GLenum pname, GLfixed *params)) _func)(target, pname, params);
}

GLAPI void APIENTRY glGetTexGenxvOES(GLenum coord, GLenum pname, GLfixed *params)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[861];
   ((void (APIENTRY *)(GLenum coord, GLenum pname, GLfixed *params)) _func)(coord, pname, params);
}

GLAPI void APIENTRY glGetTexParameterxvOES(GLenum target, GLenum pname, GLfixed *params)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[862];
   ((void (APIENTRY *)(GLenum target, GLenum pname, GLfixed *params)) _func)(target, pname, params);
}

GLAPI void APIENTRY glGetTexParameterxv(GLenum target, GLenum pname, GLfixed *params)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[862];
   ((void (APIENTRY *)(GLenum target, GLenum pname, GLfixed *params)) _func)(target, pname, params);
}

GLAPI void APIENTRY glLightModelxOES(GLenum pname, GLfixed param)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[863];
   ((void (APIENTRY *)(GLenum pname, GLfixed param)) _func)(pname, param);
}

GLAPI void APIENTRY glLightModelx(GLenum pname, GLfixed param)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[863];
   ((void (APIENTRY *)(GLenum pname, GLfixed param)) _func)(pname, param);
}

GLAPI void APIENTRY glLightModelxvOES(GLenum pname, const GLfixed *params)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[864];
   ((void (APIENTRY *)(GLenum pname, const GLfixed *params)) _func)(pname, params);
}

GLAPI void APIENTRY glLightModelxv(GLenum pname, const GLfixed *params)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[864];
   ((void (APIENTRY *)(GLenum pname, const GLfixed *params)) _func)(pname, params);
}

GLAPI void APIENTRY glLightxOES(GLenum light, GLenum pname, GLfixed param)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[865];
   ((void (APIENTRY *)(GLenum light, GLenum pname, GLfixed param)) _func)(light, pname, param);
}

GLAPI void APIENTRY glLightx(GLenum light, GLenum pname, GLfixed param)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[865];
   ((void (APIENTRY *)(GLenum light, GLenum pname, GLfixed param)) _func)(light, pname, param);
}

GLAPI void APIENTRY glLightxvOES(GLenum light, GLenum pname, const GLfixed *params)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[866];
   ((void (APIENTRY *)(GLenum light, GLenum pname, const GLfixed *params)) _func)(light, pname, params);
}

GLAPI void APIENTRY glLightxv(GLenum light, GLenum pname, const GLfixed *params)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[866];
   ((void (APIENTRY *)(GLenum light, GLenum pname, const GLfixed *params)) _func)(light, pname, params);
}

GLAPI void APIENTRY glLineWidthxOES(GLfixed width)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[867];
   ((void (APIENTRY *)(GLfixed width)) _func)(width);
}

GLAPI void APIENTRY glLineWidthx(GLfixed width)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[867];
   ((void (APIENTRY *)(GLfixed width)) _func)(width);
}

GLAPI void APIENTRY glLoadMatrixxOES(const GLfixed *m)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[868];
   ((void (APIENTRY *)(const GLfixed *m)) _func)(m);
}

GLAPI void APIENTRY glLoadMatrixx(const GLfixed *m)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[868];
   ((void (APIENTRY *)(const GLfixed *m)) _func)(m);
}

GLAPI void APIENTRY glMaterialxOES(GLenum face, GLenum pname, GLfixed param)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[869];
   ((void (APIENTRY *)(GLenum face, GLenum pname, GLfixed param)) _func)(face, pname, param);
}

GLAPI void APIENTRY glMaterialx(GLenum face, GLenum pname, GLfixed param)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[869];
   ((void (APIENTRY *)(GLenum face, GLenum pname, GLfixed param)) _func)(face, pname, param);
}

GLAPI void APIENTRY glMaterialxvOES(GLenum face, GLenum pname, const GLfixed *params)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[870];
   ((void (APIENTRY *)(GLenum face, GLenum pname, const GLfixed *params)) _func)(face, pname, params);
}

GLAPI void APIENTRY glMaterialxv(GLenum face, GLenum pname, const GLfixed *params)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[870];
   ((void (APIENTRY *)(GLenum face, GLenum pname, const GLfixed *params)) _func)(face, pname, params);
}

GLAPI void APIENTRY glMultMatrixxOES(const GLfixed *m)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[871];
   ((void (APIENTRY *)(const GLfixed *m)) _func)(m);
}

GLAPI void APIENTRY glMultMatrixx(const GLfixed *m)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[871];
   ((void (APIENTRY *)(const GLfixed *m)) _func)(m);
}

GLAPI void APIENTRY glMultiTexCoord4xOES(GLenum target, GLfixed s, GLfixed t, GLfixed r, GLfixed q)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[872];
   ((void (APIENTRY *)(GLenum target, GLfixed s, GLfixed t, GLfixed r, GLfixed q)) _func)(target, s, t, r, q);
}

GLAPI void APIENTRY glMultiTexCoord4x(GLenum target, GLfixed s, GLfixed t, GLfixed r, GLfixed q)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[872];
   ((void (APIENTRY *)(GLenum target, GLfixed s, GLfixed t, GLfixed r, GLfixed q)) _func)(target, s, t, r, q);
}

GLAPI void APIENTRY glNormal3xOES(GLfixed nx, GLfixed ny, GLfixed nz)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[873];
   ((void (APIENTRY *)(GLfixed nx, GLfixed ny, GLfixed nz)) _func)(nx, ny, nz);
}

GLAPI void APIENTRY glNormal3x(GLfixed nx, GLfixed ny, GLfixed nz)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[873];
   ((void (APIENTRY *)(GLfixed nx, GLfixed ny, GLfixed nz)) _func)(nx, ny, nz);
}

GLAPI void APIENTRY glOrthoxOES(GLfixed left, GLfixed right, GLfixed bottom, GLfixed top, GLfixed zNear, GLfixed zFar)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[874];
   ((void (APIENTRY *)(GLfixed left, GLfixed right, GLfixed bottom, GLfixed top, GLfixed zNear, GLfixed zFar)) _func)(left, right, bottom, top, zNear, zFar);
}

GLAPI void APIENTRY glOrthox(GLfixed left, GLfixed right, GLfixed bottom, GLfixed top, GLfixed zNear, GLfixed zFar)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[874];
   ((void (APIENTRY *)(GLfixed left, GLfixed right, GLfixed bottom, GLfixed top, GLfixed zNear, GLfixed zFar)) _func)(left, right, bottom, top, zNear, zFar);
}

GLAPI void APIENTRY glPointParameterxOES(GLenum pname, GLfixed param)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[875];
   ((void (APIENTRY *)(GLenum pname, GLfixed param)) _func)(pname, param);
}

GLAPI void APIENTRY glPointParameterx(GLenum pname, GLfixed param)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[875];
   ((void (APIENTRY *)(GLenum pname, GLfixed param)) _func)(pname, param);
}

GLAPI void APIENTRY glPointParameterxvOES(GLenum pname, const GLfixed *params)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[876];
   ((void (APIENTRY *)(GLenum pname, const GLfixed *params)) _func)(pname, params);
}

GLAPI void APIENTRY glPointParameterxv(GLenum pname, const GLfixed *params)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[876];
   ((void (APIENTRY *)(GLenum pname, const GLfixed *params)) _func)(pname, params);
}

GLAPI void APIENTRY glPointSizexOES(GLfixed size)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[877];
   ((void (APIENTRY *)(GLfixed size)) _func)(size);
}

GLAPI void APIENTRY glPointSizex(GLfixed size)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[877];
   ((void (APIENTRY *)(GLfixed size)) _func)(size);
}

GLAPI void APIENTRY glPolygonOffsetxOES(GLfixed factor, GLfixed units)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[878];
   ((void (APIENTRY *)(GLfixed factor, GLfixed units)) _func)(factor, units);
}

GLAPI void APIENTRY glPolygonOffsetx(GLfixed factor, GLfixed units)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[878];
   ((void (APIENTRY *)(GLfixed factor, GLfixed units)) _func)(factor, units);
}

GLAPI void APIENTRY glRotatexOES(GLfixed angle, GLfixed x, GLfixed y, GLfixed z)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[879];
   ((void (APIENTRY *)(GLfixed angle, GLfixed x, GLfixed y, GLfixed z)) _func)(angle, x, y, z);
}

GLAPI void APIENTRY glRotatex(GLfixed angle, GLfixed x, GLfixed y, GLfixed z)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[879];
   ((void (APIENTRY *)(GLfixed angle, GLfixed x, GLfixed y, GLfixed z)) _func)(angle, x, y, z);
}

GLAPI void APIENTRY glSampleCoveragexOES(GLclampx value, GLboolean invert)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[880];
   ((void (APIENTRY *)(GLclampx value, GLboolean invert)) _func)(value, invert);
}

GLAPI void APIENTRY glSampleCoveragex(GLclampx value, GLboolean invert)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[880];
   ((void (APIENTRY *)(GLclampx value, GLboolean invert)) _func)(value, invert);
}

GLAPI void APIENTRY glScalexOES(GLfixed x, GLfixed y, GLfixed z)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[881];
   ((void (APIENTRY *)(GLfixed x, GLfixed y, GLfixed z)) _func)(x, y, z);
}

GLAPI void APIENTRY glScalex(GLfixed x, GLfixed y, GLfixed z)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[881];
   ((void (APIENTRY *)(GLfixed x, GLfixed y, GLfixed z)) _func)(x, y, z);
}

GLAPI void APIENTRY glTexEnvxOES(GLenum target, GLenum pname, GLfixed param)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[882];
   ((void (APIENTRY *)(GLenum target, GLenum pname, GLfixed param)) _func)(target, pname, param);
}

GLAPI void APIENTRY glTexEnvx(GLenum target, GLenum pname, GLfixed param)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[882];
   ((void (APIENTRY *)(GLenum target, GLenum pname, GLfixed param)) _func)(target, pname, param);
}

GLAPI void APIENTRY glTexEnvxvOES(GLenum target, GLenum pname, const GLfixed *params)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[883];
   ((void (APIENTRY *)(GLenum target, GLenum pname, const GLfixed *params)) _func)(target, pname, params);
}

GLAPI void APIENTRY glTexEnvxv(GLenum target, GLenum pname, const GLfixed *params)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[883];
   ((void (APIENTRY *)(GLenum target, GLenum pname, const GLfixed *params)) _func)(target, pname, params);
}

GLAPI void APIENTRY glTexGenxOES(GLenum coord, GLenum pname, GLint param)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[884];
   ((void (APIENTRY *)(GLenum coord, GLenum pname, GLint param)) _func)(coord, pname, param);
}

GLAPI void APIENTRY glTexGenxvOES(GLenum coord, GLenum pname, const GLfixed *params)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[885];
   ((void (APIENTRY *)(GLenum coord, GLenum pname, const GLfixed *params)) _func)(coord, pname, params);
}

GLAPI void APIENTRY glTexParameterxOES(GLenum target, GLenum pname, GLfixed param)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[886];
   ((void (APIENTRY *)(GLenum target, GLenum pname, GLfixed param)) _func)(target, pname, param);
}

GLAPI void APIENTRY glTexParameterx(GLenum target, GLenum pname, GLfixed param)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[886];
   ((void (APIENTRY *)(GLenum target, GLenum pname, GLfixed param)) _func)(target, pname, param);
}

GLAPI void APIENTRY glTexParameterxvOES(GLenum target, GLenum pname, const GLfixed *params)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[887];
   ((void (APIENTRY *)(GLenum target, GLenum pname, const GLfixed *params)) _func)(target, pname, params);
}

GLAPI void APIENTRY glTexParameterxv(GLenum target, GLenum pname, const GLfixed *params)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[887];
   ((void (APIENTRY *)(GLenum target, GLenum pname, const GLfixed *params)) _func)(target, pname, params);
}

GLAPI void APIENTRY glTranslatexOES(GLfixed x, GLfixed y, GLfixed z)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[888];
   ((void (APIENTRY *)(GLfixed x, GLfixed y, GLfixed z)) _func)(x, y, z);
}

GLAPI void APIENTRY glTranslatex(GLfixed x, GLfixed y, GLfixed z)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[888];
   ((void (APIENTRY *)(GLfixed x, GLfixed y, GLfixed z)) _func)(x, y, z);
}

GLAPI void APIENTRY glClipPlanefOES(GLenum plane, const GLfloat *equation)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[889];
   ((void (APIENTRY *)(GLenum plane, const GLfloat *equation)) _func)(plane, equation);
}

GLAPI void APIENTRY glClipPlanef(GLenum plane, const GLfloat *equation)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[889];
   ((void (APIENTRY *)(GLenum plane, const GLfloat *equation)) _func)(plane, equation);
}

GLAPI void APIENTRY glFrustumfOES(GLfloat left, GLfloat right, GLfloat bottom, GLfloat top, GLfloat zNear, GLfloat zFar)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[890];
   ((void (APIENTRY *)(GLfloat left, GLfloat right, GLfloat bottom, GLfloat top, GLfloat zNear, GLfloat zFar)) _func)(left, right, bottom, top, zNear, zFar);
}

GLAPI void APIENTRY glFrustumf(GLfloat left, GLfloat right, GLfloat bottom, GLfloat top, GLfloat zNear, GLfloat zFar)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[890];
   ((void (APIENTRY *)(GLfloat left, GLfloat right, GLfloat bottom, GLfloat top, GLfloat zNear, GLfloat zFar)) _func)(left, right, bottom, top, zNear, zFar);
}

GLAPI void APIENTRY glGetClipPlanefOES(GLenum plane, GLfloat *equation)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[891];
   ((void (APIENTRY *)(GLenum plane, GLfloat *equation)) _func)(plane, equation);
}

GLAPI void APIENTRY glGetClipPlanef(GLenum plane, GLfloat *equation)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[891];
   ((void (APIENTRY *)(GLenum plane, GLfloat *equation)) _func)(plane, equation);
}

GLAPI void APIENTRY glOrthofOES(GLfloat left, GLfloat right, GLfloat bottom, GLfloat top, GLfloat zNear, GLfloat zFar)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[892];
   ((void (APIENTRY *)(GLfloat left, GLfloat right, GLfloat bottom, GLfloat top, GLfloat zNear, GLfloat zFar)) _func)(left, right, bottom, top, zNear, zFar);
}

GLAPI void APIENTRY glOrthof(GLfloat left, GLfloat right, GLfloat bottom, GLfloat top, GLfloat zNear, GLfloat zFar)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[892];
   ((void (APIENTRY *)(GLfloat left, GLfloat right, GLfloat bottom, GLfloat top, GLfloat zNear, GLfloat zFar)) _func)(left, right, bottom, top, zNear, zFar);
}

GLAPI void APIENTRY glBlendEquationSeparateOES(GLenum modeRGB, GLenum modeA)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[894];
   ((void (APIENTRY *)(GLenum modeRGB, GLenum modeA)) _func)(modeRGB, modeA);
}

GLAPI void APIENTRY glBindFramebufferOES(GLenum target, GLuint framebuffer)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[895];
   ((void (APIENTRY *)(GLenum target, GLuint framebuffer)) _func)(target, framebuffer);
}

GLAPI void APIENTRY glBindRenderbufferOES(GLenum target, GLuint renderbuffer)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[896];
   ((void (APIENTRY *)(GLenum target, GLuint renderbuffer)) _func)(target, renderbuffer);
}

GLAPI GLenum APIENTRY glCheckFramebufferStatusOES(GLenum target)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[897];
   return ((GLenum (APIENTRY *)(GLenum target)) _func)(target);
}

GLAPI void APIENTRY glDeleteFramebuffersOES(GLsizei n, const GLuint *framebuffers)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[898];
   ((void (APIENTRY *)(GLsizei n, const GLuint *framebuffers)) _func)(n, framebuffers);
}

GLAPI void APIENTRY glDeleteRenderbuffersOES(GLsizei n, const GLuint *renderbuffers)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[899];
   ((void (APIENTRY *)(GLsizei n, const GLuint *renderbuffers)) _func)(n, renderbuffers);
}

GLAPI void APIENTRY glFramebufferRenderbufferOES(GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[900];
   ((void (APIENTRY *)(GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer)) _func)(target, attachment, renderbuffertarget, renderbuffer);
}

GLAPI void APIENTRY glFramebufferTexture2DOES(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[902];
   ((void (APIENTRY *)(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level)) _func)(target, attachment, textarget, texture, level);
}

GLAPI void APIENTRY glGenFramebuffersOES(GLsizei n, GLuint *framebuffers)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[904];
   ((void (APIENTRY *)(GLsizei n, GLuint *framebuffers)) _func)(n, framebuffers);
}

GLAPI void APIENTRY glGenRenderbuffersOES(GLsizei n, GLuint *renderbuffers)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[905];
   ((void (APIENTRY *)(GLsizei n, GLuint *renderbuffers)) _func)(n, renderbuffers);
}

GLAPI void APIENTRY glGenerateMipmapOES(GLenum target)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[906];
   ((void (APIENTRY *)(GLenum target)) _func)(target);
}

GLAPI void APIENTRY glGetFramebufferAttachmentParameterivOES(GLenum target, GLenum attachment, GLenum pname, GLint *params)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[907];
   ((void (APIENTRY *)(GLenum target, GLenum attachment, GLenum pname, GLint *params)) _func)(target, attachment, pname, params);
}

GLAPI void APIENTRY glGetRenderbufferParameterivOES(GLenum target, GLenum pname, GLint *params)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[908];
   ((void (APIENTRY *)(GLenum target, GLenum pname, GLint *params)) _func)(target, pname, params);
}

GLAPI GLboolean APIENTRY glIsFramebufferOES(GLuint framebuffer)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[909];
   return ((GLboolean (APIENTRY *)(GLuint framebuffer)) _func)(framebuffer);
}

GLAPI GLboolean APIENTRY glIsRenderbufferOES(GLuint renderbuffer)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[910];
   return ((GLboolean (APIENTRY *)(GLuint renderbuffer)) _func)(renderbuffer);
}

GLAPI void APIENTRY glRenderbufferStorageOES(GLenum target, GLenum internalformat, GLsizei width, GLsizei height)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[911];
   ((void (APIENTRY *)(GLenum target, GLenum internalformat, GLsizei width, GLsizei height)) _func)(target, internalformat, width, height);
}

GLAPI void APIENTRY glEGLImageTargetRenderbufferStorageOES(GLenum target, GLvoid *writeOffset)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[986];
   ((void (APIENTRY *)(GLenum target, GLvoid *writeOffset)) _func)(target, writeOffset);
}

GLAPI void APIENTRY glEGLImageTargetTexture2DOES(GLenum target, GLvoid *writeOffset)
{
   const struct mapi_table *_tbl = entry_current_get();
   mapi_func _func = ((const mapi_func *) _tbl)[987];
   ((void (APIENTRY *)(GLenum target, GLvoid *writeOffset)) _func)(target, writeOffset);
}

/* does not need public_entries */
#undef MAPI_TMP_PUBLIC_ENTRIES_NO_HIDDEN
#endif /* MAPI_TMP_PUBLIC_ENTRIES_NO_HIDDEN */

#ifdef MAPI_TMP_STUB_ASM_GCC_NO_HIDDEN
__asm__(
STUB_ASM_ENTRY("glColor4f")"\n"
"\t"STUB_ASM_CODE("29")"\n"

STUB_ASM_ENTRY("glColor4ub")"\n"
"\t"STUB_ASM_CODE("35")"\n"

STUB_ASM_ENTRY("glNormal3f")"\n"
"\t"STUB_ASM_CODE("56")"\n"

STUB_ASM_ENTRY("glCullFace")"\n"
"\t"STUB_ASM_CODE("152")"\n"

STUB_ASM_ENTRY("glFogf")"\n"
"\t"STUB_ASM_CODE("153")"\n"

STUB_ASM_ENTRY("glFogfv")"\n"
"\t"STUB_ASM_CODE("154")"\n"

STUB_ASM_ENTRY("glFrontFace")"\n"
"\t"STUB_ASM_CODE("157")"\n"

STUB_ASM_ENTRY("glHint")"\n"
"\t"STUB_ASM_CODE("158")"\n"

STUB_ASM_ENTRY("glLightf")"\n"
"\t"STUB_ASM_CODE("159")"\n"

STUB_ASM_ENTRY("glLightfv")"\n"
"\t"STUB_ASM_CODE("160")"\n"

STUB_ASM_ENTRY("glLightModelf")"\n"
"\t"STUB_ASM_CODE("163")"\n"

STUB_ASM_ENTRY("glLightModelfv")"\n"
"\t"STUB_ASM_CODE("164")"\n"

STUB_ASM_ENTRY("glLineWidth")"\n"
"\t"STUB_ASM_CODE("168")"\n"

STUB_ASM_ENTRY("glMaterialf")"\n"
"\t"STUB_ASM_CODE("169")"\n"

STUB_ASM_ENTRY("glMaterialfv")"\n"
"\t"STUB_ASM_CODE("170")"\n"

STUB_ASM_ENTRY("glPointSize")"\n"
"\t"STUB_ASM_CODE("173")"\n"

STUB_ASM_ENTRY("glScissor")"\n"
"\t"STUB_ASM_CODE("176")"\n"

STUB_ASM_ENTRY("glShadeModel")"\n"
"\t"STUB_ASM_CODE("177")"\n"

STUB_ASM_ENTRY("glTexParameterf")"\n"
"\t"STUB_ASM_CODE("178")"\n"

STUB_ASM_ENTRY("glTexParameterfv")"\n"
"\t"STUB_ASM_CODE("179")"\n"

STUB_ASM_ENTRY("glTexParameteri")"\n"
"\t"STUB_ASM_CODE("180")"\n"

STUB_ASM_ENTRY("glTexParameteriv")"\n"
"\t"STUB_ASM_CODE("181")"\n"

STUB_ASM_ENTRY("glTexImage2D")"\n"
"\t"STUB_ASM_CODE("183")"\n"

STUB_ASM_ENTRY("glTexEnvf")"\n"
"\t"STUB_ASM_CODE("184")"\n"

STUB_ASM_ENTRY("glTexEnvfv")"\n"
"\t"STUB_ASM_CODE("185")"\n"

STUB_ASM_ENTRY("glTexEnvi")"\n"
"\t"STUB_ASM_CODE("186")"\n"

STUB_ASM_ENTRY("glTexEnviv")"\n"
"\t"STUB_ASM_CODE("187")"\n"

STUB_ASM_ENTRY("glTexGenfOES")"\n"
"\t"STUB_ASM_CODE("190")"\n"

STUB_ASM_ENTRY("glTexGenfvOES")"\n"
"\t"STUB_ASM_CODE("191")"\n"

STUB_ASM_ENTRY("glTexGeniOES")"\n"
"\t"STUB_ASM_CODE("192")"\n"

STUB_ASM_ENTRY("glTexGenivOES")"\n"
"\t"STUB_ASM_CODE("193")"\n"

STUB_ASM_ENTRY("glClear")"\n"
"\t"STUB_ASM_CODE("203")"\n"

STUB_ASM_ENTRY("glClearColor")"\n"
"\t"STUB_ASM_CODE("206")"\n"

STUB_ASM_ENTRY("glClearStencil")"\n"
"\t"STUB_ASM_CODE("207")"\n"

STUB_ASM_ENTRY("glStencilMask")"\n"
"\t"STUB_ASM_CODE("209")"\n"

STUB_ASM_ENTRY("glColorMask")"\n"
"\t"STUB_ASM_CODE("210")"\n"

STUB_ASM_ENTRY("glDepthMask")"\n"
"\t"STUB_ASM_CODE("211")"\n"

STUB_ASM_ENTRY("glDisable")"\n"
"\t"STUB_ASM_CODE("214")"\n"

STUB_ASM_ENTRY("glEnable")"\n"
"\t"STUB_ASM_CODE("215")"\n"

STUB_ASM_ENTRY("glFinish")"\n"
"\t"STUB_ASM_CODE("216")"\n"

STUB_ASM_ENTRY("glFlush")"\n"
"\t"STUB_ASM_CODE("217")"\n"

STUB_ASM_ENTRY("glAlphaFunc")"\n"
"\t"STUB_ASM_CODE("240")"\n"

STUB_ASM_ENTRY("glBlendFunc")"\n"
"\t"STUB_ASM_CODE("241")"\n"

STUB_ASM_ENTRY("glLogicOp")"\n"
"\t"STUB_ASM_CODE("242")"\n"

STUB_ASM_ENTRY("glStencilFunc")"\n"
"\t"STUB_ASM_CODE("243")"\n"

STUB_ASM_ENTRY("glStencilOp")"\n"
"\t"STUB_ASM_CODE("244")"\n"

STUB_ASM_ENTRY("glDepthFunc")"\n"
"\t"STUB_ASM_CODE("245")"\n"

STUB_ASM_ENTRY("glPixelStorei")"\n"
"\t"STUB_ASM_CODE("250")"\n"

STUB_ASM_ENTRY("glReadPixels")"\n"
"\t"STUB_ASM_CODE("256")"\n"

STUB_ASM_ENTRY("glGetBooleanv")"\n"
"\t"STUB_ASM_CODE("258")"\n"

STUB_ASM_ENTRY("glGetError")"\n"
"\t"STUB_ASM_CODE("261")"\n"

STUB_ASM_ENTRY("glGetFloatv")"\n"
"\t"STUB_ASM_CODE("262")"\n"

STUB_ASM_ENTRY("glGetIntegerv")"\n"
"\t"STUB_ASM_CODE("263")"\n"

STUB_ASM_ENTRY("glGetLightfv")"\n"
"\t"STUB_ASM_CODE("264")"\n"

STUB_ASM_ENTRY("glGetMaterialfv")"\n"
"\t"STUB_ASM_CODE("269")"\n"

STUB_ASM_ENTRY("glGetString")"\n"
"\t"STUB_ASM_CODE("275")"\n"

STUB_ASM_ENTRY("glGetTexEnvfv")"\n"
"\t"STUB_ASM_CODE("276")"\n"

STUB_ASM_ENTRY("glGetTexEnviv")"\n"
"\t"STUB_ASM_CODE("277")"\n"

STUB_ASM_ENTRY("glGetTexGenfvOES")"\n"
"\t"STUB_ASM_CODE("279")"\n"

STUB_ASM_ENTRY("glGetTexGenivOES")"\n"
"\t"STUB_ASM_CODE("280")"\n"

STUB_ASM_ENTRY("glGetTexParameterfv")"\n"
"\t"STUB_ASM_CODE("282")"\n"

STUB_ASM_ENTRY("glGetTexParameteriv")"\n"
"\t"STUB_ASM_CODE("283")"\n"

STUB_ASM_ENTRY("glIsEnabled")"\n"
"\t"STUB_ASM_CODE("286")"\n"

STUB_ASM_ENTRY("glLoadIdentity")"\n"
"\t"STUB_ASM_CODE("290")"\n"

STUB_ASM_ENTRY("glLoadMatrixf")"\n"
"\t"STUB_ASM_CODE("291")"\n"

STUB_ASM_ENTRY("glMatrixMode")"\n"
"\t"STUB_ASM_CODE("293")"\n"

STUB_ASM_ENTRY("glMultMatrixf")"\n"
"\t"STUB_ASM_CODE("294")"\n"

STUB_ASM_ENTRY("glPopMatrix")"\n"
"\t"STUB_ASM_CODE("297")"\n"

STUB_ASM_ENTRY("glPushMatrix")"\n"
"\t"STUB_ASM_CODE("298")"\n"

STUB_ASM_ENTRY("glRotatef")"\n"
"\t"STUB_ASM_CODE("300")"\n"

STUB_ASM_ENTRY("glScalef")"\n"
"\t"STUB_ASM_CODE("302")"\n"

STUB_ASM_ENTRY("glTranslatef")"\n"
"\t"STUB_ASM_CODE("304")"\n"

STUB_ASM_ENTRY("glViewport")"\n"
"\t"STUB_ASM_CODE("305")"\n"

STUB_ASM_ENTRY("glBindTexture")"\n"
"\t"STUB_ASM_CODE("307")"\n"

STUB_ASM_ENTRY("glColorPointer")"\n"
"\t"STUB_ASM_CODE("308")"\n"

STUB_ASM_ENTRY("glDisableClientState")"\n"
"\t"STUB_ASM_CODE("309")"\n"

STUB_ASM_ENTRY("glDrawArrays")"\n"
"\t"STUB_ASM_CODE("310")"\n"

STUB_ASM_ENTRY("glDrawElements")"\n"
"\t"STUB_ASM_CODE("311")"\n"

STUB_ASM_ENTRY("glEnableClientState")"\n"
"\t"STUB_ASM_CODE("313")"\n"

STUB_ASM_ENTRY("glNormalPointer")"\n"
"\t"STUB_ASM_CODE("318")"\n"

STUB_ASM_ENTRY("glPolygonOffset")"\n"
"\t"STUB_ASM_CODE("319")"\n"

STUB_ASM_ENTRY("glTexCoordPointer")"\n"
"\t"STUB_ASM_CODE("320")"\n"

STUB_ASM_ENTRY("glVertexPointer")"\n"
"\t"STUB_ASM_CODE("321")"\n"

STUB_ASM_ENTRY("glCopyTexImage2D")"\n"
"\t"STUB_ASM_CODE("324")"\n"

STUB_ASM_ENTRY("glCopyTexSubImage2D")"\n"
"\t"STUB_ASM_CODE("326")"\n"

STUB_ASM_ENTRY("glDeleteTextures")"\n"
"\t"STUB_ASM_CODE("327")"\n"

STUB_ASM_ENTRY("glGenTextures")"\n"
"\t"STUB_ASM_CODE("328")"\n"

STUB_ASM_ENTRY("glGetPointerv")"\n"
"\t"STUB_ASM_CODE("329")"\n"

STUB_ASM_ENTRY("glIsTexture")"\n"
"\t"STUB_ASM_CODE("330")"\n"

STUB_ASM_ENTRY("glTexSubImage2D")"\n"
"\t"STUB_ASM_CODE("333")"\n"

STUB_ASM_ENTRY("glBlendEquationOES")"\n"
"\t"STUB_ASM_CODE("337")"\n"

STUB_ASM_ENTRY("glActiveTexture")"\n"
"\t"STUB_ASM_CODE("374")"\n"

STUB_ASM_ENTRY("glClientActiveTexture")"\n"
"\t"STUB_ASM_CODE("375")"\n"

STUB_ASM_ENTRY("glMultiTexCoord4f")"\n"
"\t"STUB_ASM_CODE("402")"\n"

STUB_ASM_ENTRY("glSampleCoverage")"\n"
"\t"STUB_ASM_CODE("445")"\n"

STUB_ASM_ENTRY("glCompressedTexImage2D")"\n"
"\t"STUB_ASM_CODE("447")"\n"

STUB_ASM_ENTRY("glCompressedTexSubImage2D")"\n"
"\t"STUB_ASM_CODE("450")"\n"

STUB_ASM_ENTRY("glBindBuffer")"\n"
"\t"STUB_ASM_CODE("510")"\n"

STUB_ASM_ENTRY("glBufferData")"\n"
"\t"STUB_ASM_CODE("511")"\n"

STUB_ASM_ENTRY("glBufferSubData")"\n"
"\t"STUB_ASM_CODE("512")"\n"

STUB_ASM_ENTRY("glDeleteBuffers")"\n"
"\t"STUB_ASM_CODE("513")"\n"

STUB_ASM_ENTRY("glGenBuffers")"\n"
"\t"STUB_ASM_CODE("514")"\n"

STUB_ASM_ENTRY("glGetBufferParameteriv")"\n"
"\t"STUB_ASM_CODE("515")"\n"

STUB_ASM_ENTRY("glGetBufferPointervOES")"\n"
"\t"STUB_ASM_CODE("516")"\n"

STUB_ASM_ENTRY("glIsBuffer")"\n"
"\t"STUB_ASM_CODE("518")"\n"

STUB_ASM_ENTRY("glMapBufferOES")"\n"
"\t"STUB_ASM_CODE("519")"\n"

STUB_ASM_ENTRY("glUnmapBufferOES")"\n"
"\t"STUB_ASM_CODE("520")"\n"

STUB_ASM_ENTRY("glClearDepthf")"\n"
"\t"STUB_ASM_CODE("622")"\n"

".globl ""glClearDepthfOES""\n"
".set ""glClearDepthfOES"", ""glClearDepthf""\n"

STUB_ASM_ENTRY("glDepthRangef")"\n"
"\t"STUB_ASM_CODE("623")"\n"

".globl ""glDepthRangefOES""\n"
".set ""glDepthRangefOES"", ""glDepthRangef""\n"

STUB_ASM_ENTRY("glDrawTexfOES")"\n"
"\t"STUB_ASM_CODE("651")"\n"

STUB_ASM_ENTRY("glDrawTexfvOES")"\n"
"\t"STUB_ASM_CODE("652")"\n"

STUB_ASM_ENTRY("glDrawTexiOES")"\n"
"\t"STUB_ASM_CODE("653")"\n"

STUB_ASM_ENTRY("glDrawTexivOES")"\n"
"\t"STUB_ASM_CODE("654")"\n"

STUB_ASM_ENTRY("glDrawTexsOES")"\n"
"\t"STUB_ASM_CODE("655")"\n"

STUB_ASM_ENTRY("glDrawTexsvOES")"\n"
"\t"STUB_ASM_CODE("656")"\n"

STUB_ASM_ENTRY("glDrawTexxOES")"\n"
"\t"STUB_ASM_CODE("657")"\n"

STUB_ASM_ENTRY("glDrawTexxvOES")"\n"
"\t"STUB_ASM_CODE("658")"\n"

STUB_ASM_ENTRY("glPointSizePointerOES")"\n"
"\t"STUB_ASM_CODE("659")"\n"

STUB_ASM_ENTRY("glQueryMatrixxOES")"\n"
"\t"STUB_ASM_CODE("666")"\n"

STUB_ASM_ENTRY("glPointParameterf")"\n"
"\t"STUB_ASM_CODE("675")"\n"

STUB_ASM_ENTRY("glPointParameterfv")"\n"
"\t"STUB_ASM_CODE("676")"\n"

STUB_ASM_ENTRY("glMultiDrawArraysEXT")"\n"
"\t"STUB_ASM_CODE("696")"\n"

STUB_ASM_ENTRY("glMultiDrawElementsEXT")"\n"
"\t"STUB_ASM_CODE("697")"\n"

STUB_ASM_ENTRY("glBlendFuncSeparateOES")"\n"
"\t"STUB_ASM_CODE("704")"\n"

STUB_ASM_ENTRY("glAlphaFuncxOES")"\n"
"\t"STUB_ASM_CODE("847")"\n"

".globl ""glAlphaFuncx""\n"
".set ""glAlphaFuncx"", ""glAlphaFuncxOES""\n"

STUB_ASM_ENTRY("glClearColorxOES")"\n"
"\t"STUB_ASM_CODE("848")"\n"

".globl ""glClearColorx""\n"
".set ""glClearColorx"", ""glClearColorxOES""\n"

STUB_ASM_ENTRY("glClearDepthxOES")"\n"
"\t"STUB_ASM_CODE("849")"\n"

".globl ""glClearDepthx""\n"
".set ""glClearDepthx"", ""glClearDepthxOES""\n"

STUB_ASM_ENTRY("glClipPlanexOES")"\n"
"\t"STUB_ASM_CODE("850")"\n"

".globl ""glClipPlanex""\n"
".set ""glClipPlanex"", ""glClipPlanexOES""\n"

STUB_ASM_ENTRY("glColor4xOES")"\n"
"\t"STUB_ASM_CODE("851")"\n"

".globl ""glColor4x""\n"
".set ""glColor4x"", ""glColor4xOES""\n"

STUB_ASM_ENTRY("glDepthRangexOES")"\n"
"\t"STUB_ASM_CODE("852")"\n"

".globl ""glDepthRangex""\n"
".set ""glDepthRangex"", ""glDepthRangexOES""\n"

STUB_ASM_ENTRY("glFogxOES")"\n"
"\t"STUB_ASM_CODE("853")"\n"

".globl ""glFogx""\n"
".set ""glFogx"", ""glFogxOES""\n"

STUB_ASM_ENTRY("glFogxvOES")"\n"
"\t"STUB_ASM_CODE("854")"\n"

".globl ""glFogxv""\n"
".set ""glFogxv"", ""glFogxvOES""\n"

STUB_ASM_ENTRY("glFrustumxOES")"\n"
"\t"STUB_ASM_CODE("855")"\n"

".globl ""glFrustumx""\n"
".set ""glFrustumx"", ""glFrustumxOES""\n"

STUB_ASM_ENTRY("glGetClipPlanexOES")"\n"
"\t"STUB_ASM_CODE("856")"\n"

".globl ""glGetClipPlanex""\n"
".set ""glGetClipPlanex"", ""glGetClipPlanexOES""\n"

STUB_ASM_ENTRY("glGetFixedvOES")"\n"
"\t"STUB_ASM_CODE("857")"\n"

".globl ""glGetFixedv""\n"
".set ""glGetFixedv"", ""glGetFixedvOES""\n"

STUB_ASM_ENTRY("glGetLightxvOES")"\n"
"\t"STUB_ASM_CODE("858")"\n"

".globl ""glGetLightxv""\n"
".set ""glGetLightxv"", ""glGetLightxvOES""\n"

STUB_ASM_ENTRY("glGetMaterialxvOES")"\n"
"\t"STUB_ASM_CODE("859")"\n"

".globl ""glGetMaterialxv""\n"
".set ""glGetMaterialxv"", ""glGetMaterialxvOES""\n"

STUB_ASM_ENTRY("glGetTexEnvxvOES")"\n"
"\t"STUB_ASM_CODE("860")"\n"

".globl ""glGetTexEnvxv""\n"
".set ""glGetTexEnvxv"", ""glGetTexEnvxvOES""\n"

STUB_ASM_ENTRY("glGetTexGenxvOES")"\n"
"\t"STUB_ASM_CODE("861")"\n"

STUB_ASM_ENTRY("glGetTexParameterxvOES")"\n"
"\t"STUB_ASM_CODE("862")"\n"

".globl ""glGetTexParameterxv""\n"
".set ""glGetTexParameterxv"", ""glGetTexParameterxvOES""\n"

STUB_ASM_ENTRY("glLightModelxOES")"\n"
"\t"STUB_ASM_CODE("863")"\n"

".globl ""glLightModelx""\n"
".set ""glLightModelx"", ""glLightModelxOES""\n"

STUB_ASM_ENTRY("glLightModelxvOES")"\n"
"\t"STUB_ASM_CODE("864")"\n"

".globl ""glLightModelxv""\n"
".set ""glLightModelxv"", ""glLightModelxvOES""\n"

STUB_ASM_ENTRY("glLightxOES")"\n"
"\t"STUB_ASM_CODE("865")"\n"

".globl ""glLightx""\n"
".set ""glLightx"", ""glLightxOES""\n"

STUB_ASM_ENTRY("glLightxvOES")"\n"
"\t"STUB_ASM_CODE("866")"\n"

".globl ""glLightxv""\n"
".set ""glLightxv"", ""glLightxvOES""\n"

STUB_ASM_ENTRY("glLineWidthxOES")"\n"
"\t"STUB_ASM_CODE("867")"\n"

".globl ""glLineWidthx""\n"
".set ""glLineWidthx"", ""glLineWidthxOES""\n"

STUB_ASM_ENTRY("glLoadMatrixxOES")"\n"
"\t"STUB_ASM_CODE("868")"\n"

".globl ""glLoadMatrixx""\n"
".set ""glLoadMatrixx"", ""glLoadMatrixxOES""\n"

STUB_ASM_ENTRY("glMaterialxOES")"\n"
"\t"STUB_ASM_CODE("869")"\n"

".globl ""glMaterialx""\n"
".set ""glMaterialx"", ""glMaterialxOES""\n"

STUB_ASM_ENTRY("glMaterialxvOES")"\n"
"\t"STUB_ASM_CODE("870")"\n"

".globl ""glMaterialxv""\n"
".set ""glMaterialxv"", ""glMaterialxvOES""\n"

STUB_ASM_ENTRY("glMultMatrixxOES")"\n"
"\t"STUB_ASM_CODE("871")"\n"

".globl ""glMultMatrixx""\n"
".set ""glMultMatrixx"", ""glMultMatrixxOES""\n"

STUB_ASM_ENTRY("glMultiTexCoord4xOES")"\n"
"\t"STUB_ASM_CODE("872")"\n"

".globl ""glMultiTexCoord4x""\n"
".set ""glMultiTexCoord4x"", ""glMultiTexCoord4xOES""\n"

STUB_ASM_ENTRY("glNormal3xOES")"\n"
"\t"STUB_ASM_CODE("873")"\n"

".globl ""glNormal3x""\n"
".set ""glNormal3x"", ""glNormal3xOES""\n"

STUB_ASM_ENTRY("glOrthoxOES")"\n"
"\t"STUB_ASM_CODE("874")"\n"

".globl ""glOrthox""\n"
".set ""glOrthox"", ""glOrthoxOES""\n"

STUB_ASM_ENTRY("glPointParameterxOES")"\n"
"\t"STUB_ASM_CODE("875")"\n"

".globl ""glPointParameterx""\n"
".set ""glPointParameterx"", ""glPointParameterxOES""\n"

STUB_ASM_ENTRY("glPointParameterxvOES")"\n"
"\t"STUB_ASM_CODE("876")"\n"

".globl ""glPointParameterxv""\n"
".set ""glPointParameterxv"", ""glPointParameterxvOES""\n"

STUB_ASM_ENTRY("glPointSizexOES")"\n"
"\t"STUB_ASM_CODE("877")"\n"

".globl ""glPointSizex""\n"
".set ""glPointSizex"", ""glPointSizexOES""\n"

STUB_ASM_ENTRY("glPolygonOffsetxOES")"\n"
"\t"STUB_ASM_CODE("878")"\n"

".globl ""glPolygonOffsetx""\n"
".set ""glPolygonOffsetx"", ""glPolygonOffsetxOES""\n"

STUB_ASM_ENTRY("glRotatexOES")"\n"
"\t"STUB_ASM_CODE("879")"\n"

".globl ""glRotatex""\n"
".set ""glRotatex"", ""glRotatexOES""\n"

STUB_ASM_ENTRY("glSampleCoveragexOES")"\n"
"\t"STUB_ASM_CODE("880")"\n"

".globl ""glSampleCoveragex""\n"
".set ""glSampleCoveragex"", ""glSampleCoveragexOES""\n"

STUB_ASM_ENTRY("glScalexOES")"\n"
"\t"STUB_ASM_CODE("881")"\n"

".globl ""glScalex""\n"
".set ""glScalex"", ""glScalexOES""\n"

STUB_ASM_ENTRY("glTexEnvxOES")"\n"
"\t"STUB_ASM_CODE("882")"\n"

".globl ""glTexEnvx""\n"
".set ""glTexEnvx"", ""glTexEnvxOES""\n"

STUB_ASM_ENTRY("glTexEnvxvOES")"\n"
"\t"STUB_ASM_CODE("883")"\n"

".globl ""glTexEnvxv""\n"
".set ""glTexEnvxv"", ""glTexEnvxvOES""\n"

STUB_ASM_ENTRY("glTexGenxOES")"\n"
"\t"STUB_ASM_CODE("884")"\n"

STUB_ASM_ENTRY("glTexGenxvOES")"\n"
"\t"STUB_ASM_CODE("885")"\n"

STUB_ASM_ENTRY("glTexParameterxOES")"\n"
"\t"STUB_ASM_CODE("886")"\n"

".globl ""glTexParameterx""\n"
".set ""glTexParameterx"", ""glTexParameterxOES""\n"

STUB_ASM_ENTRY("glTexParameterxvOES")"\n"
"\t"STUB_ASM_CODE("887")"\n"

".globl ""glTexParameterxv""\n"
".set ""glTexParameterxv"", ""glTexParameterxvOES""\n"

STUB_ASM_ENTRY("glTranslatexOES")"\n"
"\t"STUB_ASM_CODE("888")"\n"

".globl ""glTranslatex""\n"
".set ""glTranslatex"", ""glTranslatexOES""\n"

STUB_ASM_ENTRY("glClipPlanefOES")"\n"
"\t"STUB_ASM_CODE("889")"\n"

".globl ""glClipPlanef""\n"
".set ""glClipPlanef"", ""glClipPlanefOES""\n"

STUB_ASM_ENTRY("glFrustumfOES")"\n"
"\t"STUB_ASM_CODE("890")"\n"

".globl ""glFrustumf""\n"
".set ""glFrustumf"", ""glFrustumfOES""\n"

STUB_ASM_ENTRY("glGetClipPlanefOES")"\n"
"\t"STUB_ASM_CODE("891")"\n"

".globl ""glGetClipPlanef""\n"
".set ""glGetClipPlanef"", ""glGetClipPlanefOES""\n"

STUB_ASM_ENTRY("glOrthofOES")"\n"
"\t"STUB_ASM_CODE("892")"\n"

".globl ""glOrthof""\n"
".set ""glOrthof"", ""glOrthofOES""\n"

STUB_ASM_ENTRY("glBlendEquationSeparateOES")"\n"
"\t"STUB_ASM_CODE("894")"\n"

STUB_ASM_ENTRY("glBindFramebufferOES")"\n"
"\t"STUB_ASM_CODE("895")"\n"

STUB_ASM_ENTRY("glBindRenderbufferOES")"\n"
"\t"STUB_ASM_CODE("896")"\n"

STUB_ASM_ENTRY("glCheckFramebufferStatusOES")"\n"
"\t"STUB_ASM_CODE("897")"\n"

STUB_ASM_ENTRY("glDeleteFramebuffersOES")"\n"
"\t"STUB_ASM_CODE("898")"\n"

STUB_ASM_ENTRY("glDeleteRenderbuffersOES")"\n"
"\t"STUB_ASM_CODE("899")"\n"

STUB_ASM_ENTRY("glFramebufferRenderbufferOES")"\n"
"\t"STUB_ASM_CODE("900")"\n"

STUB_ASM_ENTRY("glFramebufferTexture2DOES")"\n"
"\t"STUB_ASM_CODE("902")"\n"

STUB_ASM_ENTRY("glGenFramebuffersOES")"\n"
"\t"STUB_ASM_CODE("904")"\n"

STUB_ASM_ENTRY("glGenRenderbuffersOES")"\n"
"\t"STUB_ASM_CODE("905")"\n"

STUB_ASM_ENTRY("glGenerateMipmapOES")"\n"
"\t"STUB_ASM_CODE("906")"\n"

STUB_ASM_ENTRY("glGetFramebufferAttachmentParameterivOES")"\n"
"\t"STUB_ASM_CODE("907")"\n"

STUB_ASM_ENTRY("glGetRenderbufferParameterivOES")"\n"
"\t"STUB_ASM_CODE("908")"\n"

STUB_ASM_ENTRY("glIsFramebufferOES")"\n"
"\t"STUB_ASM_CODE("909")"\n"

STUB_ASM_ENTRY("glIsRenderbufferOES")"\n"
"\t"STUB_ASM_CODE("910")"\n"

STUB_ASM_ENTRY("glRenderbufferStorageOES")"\n"
"\t"STUB_ASM_CODE("911")"\n"

STUB_ASM_ENTRY("glEGLImageTargetRenderbufferStorageOES")"\n"
"\t"STUB_ASM_CODE("986")"\n"

STUB_ASM_ENTRY("glEGLImageTargetTexture2DOES")"\n"
"\t"STUB_ASM_CODE("987")"\n"

);
#undef MAPI_TMP_STUB_ASM_GCC_NO_HIDDEN
#endif /* MAPI_TMP_STUB_ASM_GCC_NO_HIDDEN */
